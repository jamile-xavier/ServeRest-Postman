{
	"info": {
		"_postman_id": "0658c59c-8480-4eb2-a255-06574c11c643",
		"name": "ServeRest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23226959",
		"_collection_link": "https://speeding-rocket-167088.postman.co/workspace/ServeRest~61298d08-4803-4103-b295-34dc60e43cee/collection/23226959-0658c59c-8480-4eb2-a255-06574c11c643?action=share&source=collection_link&creator=23226959"
	},
	"item": [
		{
			"name": "Sign In",
			"item": [
				{
					"name": "Tests",
					"item": [
						{
							"name": "Sucess",
							"item": [
								{
									"name": "Realizar Login Sucesso",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.environment.set(\"Token\", responseData.authorization)\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verifiy message login sucess\", function () {\r",
													"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgLoginSucess\"))\r",
													"})\r",
													"\r",
													"pm.test(\"Verify token exists\", function () {\r",
													"    pm.expect(responseData).to.have.property(\"authorization\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"{{EmailModel}}\",\r\n  \"password\": \"{{PasswordModel}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseUrl}}/login",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Exceptions",
							"item": [
								{
									"name": "Realizar Login com e-mail inválido",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify message error\", function () {\r",
													"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgWrongEmailPassword\"))\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"{{InvalidMail}}\",\r\n  \"password\": \"{{PasswordModel}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseUrl}}/login",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Realizar Login com e-mail em branco",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify message error\", function () {\r",
													"    pm.expect(responseData.email).to.eql(pm.globals.get(\"MsgEmailEmpty\"))\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"\",\r\n  \"password\": \"{{PasswordModel}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseUrl}}/login",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Realizar Login com senha em branco",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Status Code is 400\", function (){\r",
													"    pm.response.to.have.status(400)\r",
													"})\r",
													"\r",
													"pm.test(\"Verify message error\", function() {\r",
													"    pm.expect(responseData.password).to.eql(pm.globals.get(\"MsgPasswordEmpty\"))\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"{{EmailModel}}\",\r\n  \"password\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseUrl}}/login",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Realizar Login  com senha inválida",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify message error\", function () {\r",
													"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgWrongEmailPassword\"))\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"{{EmailModel}}\",\r\n  \"password\": \"{{InvalidPassword}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseUrl}}/login",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Realizar Login com e-mail e senha inválidos",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify message error\", function () {\r",
													"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgWrongEmailPassword\"))\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"{{InvalidMail}}\",\r\n  \"password\": \"{{InvalidPassword}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseUrl}}/login",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Realizar Login com e-mail e senha em branco",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Status Code is 400\", function () {\r",
													"    pm.response.to.have.status(400)\r",
													"})\r",
													"\r",
													"pm.test(\"Verify messages error\", function() {\r",
													"    pm.expect(responseData.email).to.eql(pm.globals.get(\"MsgEmailEmpty\"))\r",
													"    pm.expect(responseData.password).to.eql(pm.globals.get(\"MsgPasswordEmpty\"))\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"\",\r\n  \"password\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseUrl}}/login",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"description": "Autenticação do usuário para montar um carrinho e, se o acesso for de administrador, gerenciar os produtos.\n\nTests - Possui todos os testes realizados no endpoint.\n\nSucess - Teste de sucesso na realização de login com o usuário disponibilizado pela API.\n\nExceptions - Testes de falha na tentativa de realização de login.",
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "key",
						"value": "",
						"type": "string"
					},
					{
						"key": "value",
						"value": "",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Test Setup",
					"item": [
						{
							"name": "Realizar Login Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.environment.set(\"Token\", responseData.authorization)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifiy message login sucess\", function () {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgLoginSucess\"))\r",
											"})\r",
											"\r",
											"pm.test(\"Verify token exists\", function () {\r",
											"    pm.expect(responseData).to.have.property(\"authorization\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{EmailModel}}\",\r\n  \"password\": \"{{PasswordModel}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tests",
					"item": [
						{
							"name": "CRUD Usuário Admin = True",
							"item": [
								{
									"name": "Cadastrar usuário admin com sucesso",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function firstName() {\r",
													"    const names = [\"Ana\", \"Maria\", \"Joana\", \"Luiza\", \"Beatriz\",\r",
													"    \"Gabriela\", \"Julia\", \"Luisa\", \"Carolina\", \"Isabel\",\r",
													"    \"Eduarda\", \"Alice\", \"Laura\", \"Marcela\", \"Rafaela\",\r",
													"    \"Clarice\", \"Helena\", \"Daniela\", \"Adriana\", \"Patricia\",\r",
													"    \"Vanessa\", \"Camila\", \"Fernanda\", \"Priscila\", \"Raquel\",\r",
													"    \"Simone\", \"Andrea\", \"Luciana\", \"Elaine\", \"Monica\",\r",
													"    \"Silvia\", \"Regina\", \"Claudia\", \"Gisele\", \"Bruna\",\r",
													"    \"Thais\", \"Yasmin\", \"Nathalia\", \"Sabrina\", \"Vivian\",\r",
													"    \"Geovana\", \"Francisca\", \"Rosangela\", \"Elizabete\", \"Janaina\",\r",
													"    \"Marcia\", \"Sandra\", \"Eliane\", \"Denise\", \"Luciene\",\"Pedro\", \"Lucas\", \"Gabriel\",\"Matheus\", \"Guilherme\",  \"Felipe\", \"Bernardo\", \"Rafael\", \"Vinicius\", \"Henrique\",\r",
													"    \"Leonardo\", \"Enzo\", \"Benjamin\", \"Nicolas\", \"Pietro\",\r",
													"    \"Murilo\", \"Arthur\", \"Heitor\", \"Bryan\", \"Caio\",\r",
													"    \"Tiago\", \"Rodrigo\", \"Daniel\", \"Bruno\", \"Victor\",\r",
													"    \"Alexandre\", \"Paulo\", \"Carlos\", \"Anderson\", \"William\",\r",
													"    \"Diego\", \"Eduardo\", \"Marcelo\", \"Renan\", \"Leandro\",\r",
													"    \"Douglas\", \"Thiago\", \"Joao\", \"Felippe\", \"Augusto\",\r",
													"    \"Otavio\", \"Francisco\", \"Antonio\", \"Juliano\", \"Marco\",\r",
													"    \"Mario\", \"Roberto\", \"Ricardo\", \"Andre\", \"Fabio\"]\r",
													"\r",
													"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
													"    return randomNames\r",
													"}\r",
													"\r",
													"pm.environment.set(\"FirstName\", firstName())\r",
													"\r",
													"function lastName() {\r",
													"\r",
													"    const lastName = [\r",
													"    \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
													"    \"Alves\", \"Ferreira\", \"Costa\", \"Gomes\", \"Martins\",\r",
													"    \"Lima\", \"Garcia\", \"Dias\", \"Mendes\", \"Rocha\",\r",
													"    \"Nunes\", \"Pereira\", \"Carvalho\", \"Sousa\", \"Barbosa\",\r",
													"    \"Coelho\", \"Cruz\", \"Henrique\", \"Freitas\", \"Monteiro\",\r",
													"    \"Araujo\", \"Cardoso\", \"Fonseca\", \"Campos\", \"Melo\",\r",
													"    \"Albuquerque\", \"Andrade\", \"Antunes\", \"Amorim\", \"Azevedo\",\r",
													"    \"Batista\", \"Bernardes\", \"Botelho\", \"Camargo\", \"Carmo\",\r",
													"    \"Carvalho\", \"Castro\", \"Coutinho\", \"Couto\", \"Cunha\",\r",
													"    \"Duarte\", \"Figueiredo\", \"Frota\", \"Furtado\", \"Goncalves\",\r",
													"    \"Lopes\", \"Machado\", \"Marques\", \"Matos\", \"Medeiros\",\r",
													"    \"Moraes\", \"Moreira\", \"Moura\", \"Nascimento\", \"Nogueira\",\r",
													"    \"Oliveira\", \"Pacheco\", \"Paiva\", \"Paula\", \"Pinto\",\r",
													"    \"Pires\", \"Queiroz\", \"Ramos\", \"Reis\", \"Ribeiro\",\r",
													"    \"Sampaio\", \"Santana\", \"Santiago\", \"Santos\", \"Severino\",\r",
													"    \"Siqueira\", \"Soares\", \"Teixeira\", \"Torres\", \"Vasconcelos\",\r",
													"    \"Vieira\", \"Vilela\", \"Xavier\", \"Abreu\", \"Almeida\",\r",
													"    \"Alvares\", \"Aragao\", \"Araujo\", \"Barros\", \"Bastos\",\r",
													"    \"Brito\", \"Cabral\", \"Correia\", \"Correa\", \"Domingues\",\r",
													"    \"Escobar\", \"Esteves\", \"Faria\", \"Fernandes\", \"Ferraz\",\r",
													"    \"Franca\", \"Franco\", \"Guedes\", \"Leal\", \"Leite\",\r",
													"    \"Lopes\", \"Lourenco\", \"Maciel\", \"Magalhaes\", \"Maia\",\r",
													"    \"Marinho\", \"Mattos\", \"Menezes\", \"Miranda\", \"Moraes\",\r",
													"    \"Morais\", \"Mourao\", \"Navarro\", \"Neves\", \"Nobre\",\r",
													"    \"Ochoa\", \"Pessoa\", \"Pinheiro\", \"Porto\", \"Quintela\",\r",
													"    \"Rangel\", \"Rego\", \"Ribeiro\", \"Rocha\", \"Rosario\",\r",
													"    \"Sales\", \"Santoro\", \"Saraiva\", \"Sarmento\", \"Seabra\",\r",
													"    \"Sena\", \"Serra\", \"Serrano\", \"Silveira\", \"Simoes\",\r",
													"    \"Soeiro\", \"Tavares\", \"Teles\", \"Tenorio\", \"Terra\",\r",
													"    \"Valente\", \"Valentim\", \"Vargas\", \"Vasques\", \"Veiga\",\r",
													"    \"Veloso\", \"Viana\", \"Viegas\", \"Vieira\", \"Vila\",\r",
													"    \"Vilas\", \"Villas\", \"Vital\", \"Zamith\", \"Zanetti\"]\r",
													"\r",
													"    const randomLastName = lastName[Math.floor(Math.random() * lastName.length)]\r",
													"    return randomLastName\r",
													"}\r",
													"\r",
													"pm.environment.set(\"LastName\", lastName())\r",
													"\r",
													"pm.environment.set(\"FullNameUserAdmin\", pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
													"\r",
													"function generateProvedor () {\r",
													"    const provedor = [\"@yahoo.com.br\", \"@gmail.com\", \"@hotmail.com\", \"@uol.com\", \"@outlook.com\"]\r",
													"    const randomProvedor = provedor[Math.floor(Math.random() * provedor.length)]\r",
													"    return randomProvedor\r",
													"}\r",
													"pm.environment.set(\"Provedor\", generateProvedor())\r",
													"\r",
													"pm.environment.set(\"MailUserAdmin\", pm.environment.get(\"FullName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")+\"_\"+pm.variables.replaceIn('{{$guid}}' + pm.environment.get(\"Provedor\")))\r",
													"\r",
													"function generatePassword(){\r",
													"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%*\";\r",
													"    const minLength = 6;\r",
													"    const maxLength = 12;\r",
													"\r",
													"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;\r",
													"    let password = \"\";\r",
													"\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        const randomIndex = Math.floor(Math.random() * chars.length);\r",
													"        password += chars[randomIndex];\r",
													"    }\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"pm.environment.set(\"PasswordUserAdmin\", generatePassword())\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.environment.set(\"UserAdminId\", responseData._id)\r",
													"\r",
													"pm.test(\"Status Code is 201\", () => {\r",
													"    pm.response.to.have.status(201)\r",
													"})\r",
													"\r",
													"pm.test(\"Verify message sucess\", () => {\r",
													"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgUserCreatedSucess\"))\r",
													"})\r",
													"\r",
													"pm.test(\"Verify id is not empty\", () => {\r",
													"    pm.expect(responseData._id).to.not.be.empty\r",
													"})\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{Token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{{FullNameUserAdmin}}\",\r\n  \"email\": \"{{MailUserAdmin}}\",\r\n  \"password\": \"{{PasswordUserAdmin}}\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseUrl}}/usuarios",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"usuarios"
											]
										}
									},
									"response": []
								},
								{
									"name": "Realizar login de usuário admin cadastrado",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.environment.set(\"TokenAdmin\", responseData.authorization)\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verifiy message login sucess\", function () {\r",
													"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgLoginSucess\"))\r",
													"})\r",
													"\r",
													"pm.test(\"Verify token exists\", function () {\r",
													"    pm.expect(responseData).to.have.property(\"authorization\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"packages": {},
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"{{MailUserAdmin}}\",\r\n  \"password\": \"{{PasswordUserAdmin}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseUrl}}/login",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Listar usuários com sucesso",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Status Code is 200\", () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"pm.test(\"Response contains a array\", function () {\r",
													"    pm.expect(Array.isArray(responseData.usuarios)).to.be.true;\r",
													"    pm.expect(responseData.usuarios.length).to.be.above(0);\r",
													"    });\r",
													"\r",
													"pm.test(\"Check properties exists and not be null\", () => {\r",
													"    pm.expect(responseData.usuarios[0]).to.have.property(\"nome\").and.to.not.be.null\r",
													"    pm.expect(responseData.usuarios[0]).to.have.property(\"email\").and.to.not.be.null\r",
													"    pm.expect(responseData.usuarios[0]).to.have.property(\"password\").and.to.not.be.null\r",
													"    pm.expect(responseData.usuarios[0]).to.have.property(\"administrador\").and.to.not.be.null\r",
													"    pm.expect(responseData.usuarios[0]).to.have.property(\"_id\").and.to.not.be.null\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseUrl}}/usuarios",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"usuarios"
											]
										}
									},
									"response": []
								},
								{
									"name": "Listar usuários  admin true com sucesso",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Status Code is 200\", () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"pm.test(\"Response contains a array\", function ()  {\r",
													"    pm.expect(Array.isArray(responseData.usuarios)).to.be.true;\r",
													"    pm.expect(responseData.usuarios.length).to.be.above(0);\r",
													"    });\r",
													"\r",
													"pm.test(\"Check properties exists and not be null\", () => {\r",
													"    pm.expect(responseData.usuarios[0]).to.have.property(\"nome\").and.to.not.be.null\r",
													"    pm.expect(responseData.usuarios[0]).to.have.property(\"email\").and.to.not.be.null\r",
													"    pm.expect(responseData.usuarios[0]).to.have.property(\"password\").and.to.not.be.null\r",
													"    pm.expect(responseData.usuarios[0]).to.have.property(\"administrador\").and.to.not.be.null\r",
													"    pm.expect(responseData.usuarios[0]).to.have.property(\"_id\").and.to.not.be.null\r",
													"})\r",
													"\r",
													"pm.test(\"Verify admin is 'true'\", () => {\r",
													"    pm.expect(responseData.usuarios[0].administrador).to.eql(\"true\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseUrl}}/usuarios?administrador=true",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"usuarios"
											],
											"query": [
												{
													"key": "administrador",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Buscar usuário por id  com sucesso",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Status Code is 200\", () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"pm.test(\"Check properties exists and not be null\", () => {\r",
													"    pm.expect(responseData).has.a.property(\"nome\").and.not.be.null\r",
													"    pm.expect(responseData).has.a.property(\"email\").and.not.be.null\r",
													"    pm.expect(responseData).has.a.property(\"password\").and.not.be.null\r",
													"    pm.expect(responseData).has.a.property(\"administrador\").and.not.be.null\r",
													"    pm.expect(responseData).has.a.property(\"_id\").and.not.be.null\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseUrl}}/usuarios/{{UserAdminId}}",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"usuarios",
												"{{UserAdminId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Atualizar usuário admin por id  com sucesso",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateProvedor () {\r",
													"    const provedor = [\"@yahoo.com.br\", \"@gmail.com\", \"@hotmail.com\", \"@uol.com\", \"@outlook.com\"]\r",
													"    const randomProvedor = provedor[Math.floor(Math.random() * provedor.length)]\r",
													"    return randomProvedor\r",
													"}\r",
													"pm.environment.set(\"Provedor\", generateProvedor())\r",
													"\r",
													"pm.environment.set(\"NewMailUserAdmin\", pm.environment.get(\"FullName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")+\"_\"+pm.variables.replaceIn('{{$guid}}' + pm.environment.get(\"Provedor\")))"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Status Code is 200\", () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"pm.test(\"Check message updated is sucess\", () => {\r",
													"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgUserUpdatedSucess\"))\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{{FullNameUserAdmin}}\",\r\n  \"email\": \"{{NewMailUserAdmin}}\",\r\n  \"password\": \"{{PasswordUserAdmin}}\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseUrl}}/usuarios/{{UserAdminId}}",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"usuarios",
												"{{UserAdminId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Buscar usuário por id após atualização",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Status Code is 200\", () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"pm.test(\"Check properties exists and not be null\", () => {\r",
													"    pm.expect(responseData).has.a.property(\"nome\").and.not.be.null\r",
													"    pm.expect(responseData).has.a.property(\"email\").and.not.be.null\r",
													"    pm.expect(responseData).has.a.property(\"password\").and.not.be.null\r",
													"    pm.expect(responseData).has.a.property(\"administrador\").and.not.be.null\r",
													"    pm.expect(responseData).has.a.property(\"_id\").and.not.be.null\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseUrl}}/usuarios/{{UserAdminId}}",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"usuarios",
												"{{UserAdminId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Excluir usuário admin por id com sucesso",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Check Status Code is 200\", () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"pm.test(\"Verify message user deleted sucess\", () => {\r",
													"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgUserDeletedSucess\"))\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BaseUrl}}/usuarios/{{UserAdminId}}",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"usuarios",
												"{{UserAdminId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Buscar usuário por id após exclusão",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Check Status Code is 400\", () => {\r",
													"    pm.response.to.have.status(400)\r",
													"})\r",
													"\r",
													"pm.test(\"Check message user not found\", () => {\r",
													"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgUserNotFound\"))\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseUrl}}/usuarios/{{UserAdminId}}",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"usuarios",
												"{{UserAdminId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CRUD Usuário Admin = False",
							"item": [
								{
									"name": "Cadastrar usuário com sucesso",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function firstName() {\r",
													"    const names = [\"Ana\", \"Maria\", \"Joana\", \"Luiza\", \"Beatriz\",\r",
													"    \"Gabriela\", \"Julia\", \"Luisa\", \"Carolina\", \"Isabel\",\r",
													"    \"Eduarda\", \"Alice\", \"Laura\", \"Marcela\", \"Rafaela\",\r",
													"    \"Clarice\", \"Helena\", \"Daniela\", \"Adriana\", \"Patricia\",\r",
													"    \"Vanessa\", \"Camila\", \"Fernanda\", \"Priscila\", \"Raquel\",\r",
													"    \"Simone\", \"Andrea\", \"Luciana\", \"Elaine\", \"Monica\",\r",
													"    \"Silvia\", \"Regina\", \"Claudia\", \"Gisele\", \"Bruna\",\r",
													"    \"Thais\", \"Yasmin\", \"Nathalia\", \"Sabrina\", \"Vivian\",\r",
													"    \"Geovana\", \"Francisca\", \"Rosangela\", \"Elizabete\", \"Janaina\",\r",
													"    \"Marcia\", \"Sandra\", \"Eliane\", \"Denise\", \"Luciene\",\"Pedro\", \"Lucas\", \"Gabriel\",\"Matheus\", \"Guilherme\",  \"Felipe\", \"Bernardo\", \"Rafael\", \"Vinicius\", \"Henrique\",\r",
													"    \"Leonardo\", \"Enzo\", \"Benjamin\", \"Nicolas\", \"Pietro\",\r",
													"    \"Murilo\", \"Arthur\", \"Heitor\", \"Bryan\", \"Caio\",\r",
													"    \"Tiago\", \"Rodrigo\", \"Daniel\", \"Bruno\", \"Victor\",\r",
													"    \"Alexandre\", \"Paulo\", \"Carlos\", \"Anderson\", \"William\",\r",
													"    \"Diego\", \"Eduardo\", \"Marcelo\", \"Renan\", \"Leandro\",\r",
													"    \"Douglas\", \"Thiago\", \"Joao\", \"Felippe\", \"Augusto\",\r",
													"    \"Otavio\", \"Francisco\", \"Antonio\", \"Juliano\", \"Marco\",\r",
													"    \"Mario\", \"Roberto\", \"Ricardo\", \"Andre\", \"Fabio\"]\r",
													"\r",
													"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
													"    return randomNames\r",
													"}\r",
													"\r",
													"pm.environment.set(\"FirstName\", firstName())\r",
													"\r",
													"function lastName() {\r",
													"\r",
													"    const lastName = [\r",
													"    \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
													"    \"Alves\", \"Ferreira\", \"Costa\", \"Gomes\", \"Martins\",\r",
													"    \"Lima\", \"Garcia\", \"Dias\", \"Mendes\", \"Rocha\",\r",
													"    \"Nunes\", \"Pereira\", \"Carvalho\", \"Sousa\", \"Barbosa\",\r",
													"    \"Coelho\", \"Cruz\", \"Henrique\", \"Freitas\", \"Monteiro\",\r",
													"    \"Araujo\", \"Cardoso\", \"Fonseca\", \"Campos\", \"Melo\",\r",
													"    \"Albuquerque\", \"Andrade\", \"Antunes\", \"Amorim\", \"Azevedo\",\r",
													"    \"Batista\", \"Bernardes\", \"Botelho\", \"Camargo\", \"Carmo\",\r",
													"    \"Carvalho\", \"Castro\", \"Coutinho\", \"Couto\", \"Cunha\",\r",
													"    \"Duarte\", \"Figueiredo\", \"Frota\", \"Furtado\", \"Goncalves\",\r",
													"    \"Lopes\", \"Machado\", \"Marques\", \"Matos\", \"Medeiros\",\r",
													"    \"Moraes\", \"Moreira\", \"Moura\", \"Nascimento\", \"Nogueira\",\r",
													"    \"Oliveira\", \"Pacheco\", \"Paiva\", \"Paula\", \"Pinto\",\r",
													"    \"Pires\", \"Queiroz\", \"Ramos\", \"Reis\", \"Ribeiro\",\r",
													"    \"Sampaio\", \"Santana\", \"Santiago\", \"Santos\", \"Severino\",\r",
													"    \"Siqueira\", \"Soares\", \"Teixeira\", \"Torres\", \"Vasconcelos\",\r",
													"    \"Vieira\", \"Vilela\", \"Xavier\", \"Abreu\", \"Almeida\",\r",
													"    \"Alvares\", \"Aragao\", \"Araujo\", \"Barros\", \"Bastos\",\r",
													"    \"Brito\", \"Cabral\", \"Correia\", \"Correa\", \"Domingues\",\r",
													"    \"Escobar\", \"Esteves\", \"Faria\", \"Fernandes\", \"Ferraz\",\r",
													"    \"Franca\", \"Franco\", \"Guedes\", \"Leal\", \"Leite\",\r",
													"    \"Lopes\", \"Lourenco\", \"Maciel\", \"Magalhaes\", \"Maia\",\r",
													"    \"Marinho\", \"Mattos\", \"Menezes\", \"Miranda\", \"Moraes\",\r",
													"    \"Morais\", \"Mourao\", \"Navarro\", \"Neves\", \"Nobre\",\r",
													"    \"Ochoa\", \"Pessoa\", \"Pinheiro\", \"Porto\", \"Quintela\",\r",
													"    \"Rangel\", \"Rego\", \"Ribeiro\", \"Rocha\", \"Rosario\",\r",
													"    \"Sales\", \"Santoro\", \"Saraiva\", \"Sarmento\", \"Seabra\",\r",
													"    \"Sena\", \"Serra\", \"Serrano\", \"Silveira\", \"Simoes\",\r",
													"    \"Soeiro\", \"Tavares\", \"Teles\", \"Tenorio\", \"Terra\",\r",
													"    \"Valente\", \"Valentim\", \"Vargas\", \"Vasques\", \"Veiga\",\r",
													"    \"Veloso\", \"Viana\", \"Viegas\", \"Vieira\", \"Vila\",\r",
													"    \"Vilas\", \"Villas\", \"Vital\", \"Zamith\", \"Zanetti\"]\r",
													"\r",
													"    const randomLastName = lastName[Math.floor(Math.random() * lastName.length)]\r",
													"    return randomLastName\r",
													"}\r",
													"\r",
													"pm.environment.set(\"LastName\", lastName())\r",
													"\r",
													"pm.environment.set(\"FullNameUser\", pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
													"\r",
													"function generateProvedor () {\r",
													"    const provedor = [\"@yahoo.com.br\", \"@gmail.com\", \"@hotmail.com\", \"@uol.com\", \"@outlook.com\"]\r",
													"    const randomProvedor = provedor[Math.floor(Math.random() * provedor.length)]\r",
													"    return randomProvedor\r",
													"}\r",
													"pm.environment.set(\"Provedor\", generateProvedor())\r",
													"\r",
													"pm.environment.set(\"MailUser\", pm.environment.get(\"FullName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")+\"_\"+pm.variables.replaceIn('{{$guid}}' + pm.environment.get(\"Provedor\")))\r",
													"\r",
													"function generatePassword(){\r",
													"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%*\";\r",
													"    const minLength = 6;\r",
													"    const maxLength = 12;\r",
													"\r",
													"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;\r",
													"    let password = \"\";\r",
													"\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        const randomIndex = Math.floor(Math.random() * chars.length);\r",
													"        password += chars[randomIndex];\r",
													"    }\r",
													"\r",
													"    return password;\r",
													"}\r",
													"\r",
													"pm.environment.set(\"PasswordUser\", generatePassword())\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.environment.set(\"UserID\", responseData._id)\r",
													"\r",
													"pm.test(\"Status Code is 201\", () => {\r",
													"    pm.response.to.have.status(201)\r",
													"})\r",
													"\r",
													"pm.test(\"Verify message sucess\", () => {\r",
													"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgUserCreatedSucess\"))\r",
													"})\r",
													"\r",
													"pm.test(\"Verify id is not empty\", () => {\r",
													"    pm.expect(responseData._id).to.not.be.empty\r",
													"})\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{Token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{{FullNameUser}}\",\r\n  \"email\": \"{{MailUser}}\",\r\n  \"password\": \"{{PasswordUser}}\",\r\n  \"administrador\": \"false\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseUrl}}/usuarios",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"usuarios"
											]
										}
									},
									"response": []
								},
								{
									"name": "Realizar login de usuário cadastrado",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.environment.set(\"TokenUser\", responseData.authorization)\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verifiy message login sucess\", function () {\r",
													"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgLoginSucess\"))\r",
													"})\r",
													"\r",
													"pm.test(\"Verify token exists\", function () {\r",
													"    pm.expect(responseData).to.have.property(\"authorization\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"{{MailUser}}\",\r\n  \"password\": \"{{PasswordUser}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseUrl}}/login",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Listar usuários com sucesso",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Status Code is 200\", () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"pm.test(\"Response contains a array\", function () {\r",
													"    pm.expect(Array.isArray(responseData.usuarios)).to.be.true;\r",
													"    pm.expect(responseData.usuarios.length).to.be.above(0);\r",
													"    });\r",
													"\r",
													"pm.test(\"Check properties exists and not be null\", () => {\r",
													"    pm.expect(responseData.usuarios[0]).to.have.property(\"nome\").and.to.not.be.null\r",
													"    pm.expect(responseData.usuarios[0]).to.have.property(\"email\").and.to.not.be.null\r",
													"    pm.expect(responseData.usuarios[0]).to.have.property(\"password\").and.to.not.be.null\r",
													"    pm.expect(responseData.usuarios[0]).to.have.property(\"administrador\").and.to.not.be.null\r",
													"    pm.expect(responseData.usuarios[0]).to.have.property(\"_id\").and.to.not.be.null\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseUrl}}/usuarios",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"usuarios"
											]
										}
									},
									"response": []
								},
								{
									"name": "Listar usuários  admin false com sucesso",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Status Code is 200\", () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"pm.test(\"Response contains a array\", function () {\r",
													"    pm.expect(Array.isArray(responseData.usuarios)).to.be.true;\r",
													"    pm.expect(responseData.usuarios.length).to.be.above(0);\r",
													"    });\r",
													"\r",
													"pm.test(\"Check properties exists and not be null\", () => {\r",
													"    pm.expect(responseData.usuarios[0]).to.have.property(\"nome\").and.to.not.be.null\r",
													"    pm.expect(responseData.usuarios[0]).to.have.property(\"email\").and.to.not.be.null\r",
													"    pm.expect(responseData.usuarios[0]).to.have.property(\"password\").and.to.not.be.null\r",
													"    pm.expect(responseData.usuarios[0]).to.have.property(\"administrador\").and.to.not.be.null\r",
													"    pm.expect(responseData.usuarios[0]).to.have.property(\"_id\").and.to.not.be.null\r",
													"})\r",
													"\r",
													"pm.test(\"Verify admin is 'false'\", () => {\r",
													"    pm.expect(responseData.usuarios[0].administrador).to.eql(\"false\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseUrl}}/usuarios?administrador=false",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"usuarios"
											],
											"query": [
												{
													"key": "administrador",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Buscar usuário por id  com sucesso",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Status Code is 200\", () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"pm.test(\"Check properties exists and not be null\", () => {\r",
													"    pm.expect(responseData).has.a.property(\"nome\").and.not.be.null\r",
													"    pm.expect(responseData).has.a.property(\"email\").and.not.be.null\r",
													"    pm.expect(responseData).has.a.property(\"password\").and.not.be.null\r",
													"    pm.expect(responseData).has.a.property(\"administrador\").and.not.be.null\r",
													"    pm.expect(responseData).has.a.property(\"_id\").and.not.be.null\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseUrl}}/usuarios/{{UserID}}",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"usuarios",
												"{{UserID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Atualizar usuário por id  com sucesso",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateProvedor () {\r",
													"    const provedor = [\"@yahoo.com.br\", \"@gmail.com\", \"@hotmail.com\", \"@uol.com\", \"@outlook.com\"]\r",
													"    const randomProvedor = provedor[Math.floor(Math.random() * provedor.length)]\r",
													"    return randomProvedor\r",
													"}\r",
													"pm.environment.set(\"Provedor\", generateProvedor())\r",
													"\r",
													"pm.environment.set(\"NewMailUser\", pm.environment.get(\"FullName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")+\"_\"+pm.variables.replaceIn('{{$guid}}' + pm.environment.get(\"Provedor\")))"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Status Code is 200\", () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"pm.test(\"Check message updated is sucess\", () => {\r",
													"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgUserUpdatedSucess\"))\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{{FullNameUser}}\",\r\n  \"email\": \"{{NewMailUser}}\",\r\n  \"password\": \"{{PasswordUser}}\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseUrl}}/usuarios/{{UserID}}",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"usuarios",
												"{{UserID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Buscar usuário por id após atualização",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Status Code is 200\", () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"pm.test(\"Check properties exists and not be null\", () => {\r",
													"    pm.expect(responseData).has.a.property(\"nome\").and.not.be.null\r",
													"    pm.expect(responseData).has.a.property(\"email\").and.not.be.null\r",
													"    pm.expect(responseData).has.a.property(\"password\").and.not.be.null\r",
													"    pm.expect(responseData).has.a.property(\"administrador\").and.not.be.null\r",
													"    pm.expect(responseData).has.a.property(\"_id\").and.not.be.null\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseUrl}}/usuarios/{{UserID}}",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"usuarios",
												"{{UserID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Excluir usuário por id com sucesso",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Check Status Code is 200\", () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"pm.test(\"Verify message user deleted sucess\", () => {\r",
													"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgUserDeletedSucess\"))\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BaseUrl}}/usuarios/{{UserID}}",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"usuarios",
												"{{UserID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Buscar usuário por id após exclusão",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Check Status Code is 400\", () => {\r",
													"    pm.response.to.have.status(400)\r",
													"})\r",
													"\r",
													"pm.test(\"Check message user not found\", () => {\r",
													"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgUserNotFound\"))\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseUrl}}/usuarios/{{UserID}}",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"usuarios",
												"{{UserID}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "apikey",
								"apikey": [
									{
										"key": "value",
										"value": "{{TokenUser}}",
										"type": "string"
									},
									{
										"key": "key",
										"value": "authorization",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Exceptions",
							"item": [
								{
									"name": "Cadastrar usuário com e-mail em duplicidade",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Check Status Code is 400\", () => {\r",
													"    pm.response.to.have.status(400)\r",
													"})\r",
													"\r",
													"pm.test(\"Check message e-mail exists\", () => {\r",
													"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgEmailExists\"))\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{{FullName}}\",\r\n  \"email\": \"{{MailDuplicate}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseUrl}}/usuarios",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"usuarios"
											]
										}
									},
									"response": []
								},
								{
									"name": "Buscar usuário por id  id inválido",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Check Status Code is 400\", () => {\r",
													"    pm.response.to.have.status(400)\r",
													"})\r",
													"\r",
													"pm.test(\"Check message error id\", () => {\r",
													"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgInvalidId\"))\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseUrl}}/usuarios/{{InvalidId}}",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"usuarios",
												"{{InvalidId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Atualizar usuário por id  informando e-mail existente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Status Code is 400\", () => {\r",
													"    pm.response.to.have.status(400)\r",
													"})\r",
													"\r",
													"pm.test(\"Check message error\", () => {\r",
													"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgEmailExists\"))\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{{FullName}}\",\r\n  \"email\": \"{{MailDuplicate}}\",\r\n  \"password\": \"{{NewPassword}}\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseUrl}}/usuarios/{{UserID}}",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"usuarios",
												"{{UserID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"description": "Gerenciamento de usuários, consulta de dados e cadastro de administrador.\n\nTest Setup - dependências necessárias para realização dos testes.\n\nTests - testes de sucesso e falha relacionados ao endpoint de usuários.",
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "key",
						"value": "Authorization",
						"type": "string"
					},
					{
						"key": "value",
						"value": "{{TokenAdmin}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Produtos",
			"item": [
				{
					"name": "Test Setup",
					"item": [
						{
							"name": "Realizar Login Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.environment.set(\"Token\", responseData.authorization)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifiy message login sucess\", function () {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgLoginSucess\"))\r",
											"})\r",
											"\r",
											"pm.test(\"Verify token exists\", function () {\r",
											"    pm.expect(responseData).to.have.property(\"authorization\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{EmailModel}}\",\r\n  \"password\": \"{{PasswordModel}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar usuário admin com sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstName() {\r",
											"    const names = [\"Ana\", \"Maria\", \"Joana\", \"Luiza\", \"Beatriz\",\r",
											"    \"Gabriela\", \"Julia\", \"Luisa\", \"Carolina\", \"Isabel\",\r",
											"    \"Eduarda\", \"Alice\", \"Laura\", \"Marcela\", \"Rafaela\",\r",
											"    \"Clarice\", \"Helena\", \"Daniela\", \"Adriana\", \"Patricia\",\r",
											"    \"Vanessa\", \"Camila\", \"Fernanda\", \"Priscila\", \"Raquel\",\r",
											"    \"Simone\", \"Andrea\", \"Luciana\", \"Elaine\", \"Monica\",\r",
											"    \"Silvia\", \"Regina\", \"Claudia\", \"Gisele\", \"Bruna\",\r",
											"    \"Thais\", \"Yasmin\", \"Nathalia\", \"Sabrina\", \"Vivian\",\r",
											"    \"Geovana\", \"Francisca\", \"Rosangela\", \"Elizabete\", \"Janaina\",\r",
											"    \"Marcia\", \"Sandra\", \"Eliane\", \"Denise\", \"Luciene\",\"Pedro\", \"Lucas\", \"Gabriel\",\"Matheus\", \"Guilherme\",  \"Felipe\", \"Bernardo\", \"Rafael\", \"Vinicius\", \"Henrique\",\r",
											"    \"Leonardo\", \"Enzo\", \"Benjamin\", \"Nicolas\", \"Pietro\",\r",
											"    \"Murilo\", \"Arthur\", \"Heitor\", \"Bryan\", \"Caio\",\r",
											"    \"Tiago\", \"Rodrigo\", \"Daniel\", \"Bruno\", \"Victor\",\r",
											"    \"Alexandre\", \"Paulo\", \"Carlos\", \"Anderson\", \"William\",\r",
											"    \"Diego\", \"Eduardo\", \"Marcelo\", \"Renan\", \"Leandro\",\r",
											"    \"Douglas\", \"Thiago\", \"Joao\", \"Felippe\", \"Augusto\",\r",
											"    \"Otavio\", \"Francisco\", \"Antonio\", \"Juliano\", \"Marco\",\r",
											"    \"Mario\", \"Roberto\", \"Ricardo\", \"Andre\", \"Fabio\"]\r",
											"\r",
											"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomNames\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstName\", firstName())\r",
											"\r",
											"function lastName() {\r",
											"\r",
											"    const lastName = [\r",
											"    \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
											"    \"Alves\", \"Ferreira\", \"Costa\", \"Gomes\", \"Martins\",\r",
											"    \"Lima\", \"Garcia\", \"Dias\", \"Mendes\", \"Rocha\",\r",
											"    \"Nunes\", \"Pereira\", \"Carvalho\", \"Sousa\", \"Barbosa\",\r",
											"    \"Coelho\", \"Cruz\", \"Henrique\", \"Freitas\", \"Monteiro\",\r",
											"    \"Araujo\", \"Cardoso\", \"Fonseca\", \"Campos\", \"Melo\",\r",
											"    \"Albuquerque\", \"Andrade\", \"Antunes\", \"Amorim\", \"Azevedo\",\r",
											"    \"Batista\", \"Bernardes\", \"Botelho\", \"Camargo\", \"Carmo\",\r",
											"    \"Carvalho\", \"Castro\", \"Coutinho\", \"Couto\", \"Cunha\",\r",
											"    \"Duarte\", \"Figueiredo\", \"Frota\", \"Furtado\", \"Goncalves\",\r",
											"    \"Lopes\", \"Machado\", \"Marques\", \"Matos\", \"Medeiros\",\r",
											"    \"Moraes\", \"Moreira\", \"Moura\", \"Nascimento\", \"Nogueira\",\r",
											"    \"Oliveira\", \"Pacheco\", \"Paiva\", \"Paula\", \"Pinto\",\r",
											"    \"Pires\", \"Queiroz\", \"Ramos\", \"Reis\", \"Ribeiro\",\r",
											"    \"Sampaio\", \"Santana\", \"Santiago\", \"Santos\", \"Severino\",\r",
											"    \"Siqueira\", \"Soares\", \"Teixeira\", \"Torres\", \"Vasconcelos\",\r",
											"    \"Vieira\", \"Vilela\", \"Xavier\", \"Abreu\", \"Almeida\",\r",
											"    \"Alvares\", \"Aragao\", \"Araujo\", \"Barros\", \"Bastos\",\r",
											"    \"Brito\", \"Cabral\", \"Correia\", \"Correa\", \"Domingues\",\r",
											"    \"Escobar\", \"Esteves\", \"Faria\", \"Fernandes\", \"Ferraz\",\r",
											"    \"Franca\", \"Franco\", \"Guedes\", \"Leal\", \"Leite\",\r",
											"    \"Lopes\", \"Lourenco\", \"Maciel\", \"Magalhaes\", \"Maia\",\r",
											"    \"Marinho\", \"Mattos\", \"Menezes\", \"Miranda\", \"Moraes\",\r",
											"    \"Morais\", \"Mourao\", \"Navarro\", \"Neves\", \"Nobre\",\r",
											"    \"Ochoa\", \"Pessoa\", \"Pinheiro\", \"Porto\", \"Quintela\",\r",
											"    \"Rangel\", \"Rego\", \"Ribeiro\", \"Rocha\", \"Rosario\",\r",
											"    \"Sales\", \"Santoro\", \"Saraiva\", \"Sarmento\", \"Seabra\",\r",
											"    \"Sena\", \"Serra\", \"Serrano\", \"Silveira\", \"Simoes\",\r",
											"    \"Soeiro\", \"Tavares\", \"Teles\", \"Tenorio\", \"Terra\",\r",
											"    \"Valente\", \"Valentim\", \"Vargas\", \"Vasques\", \"Veiga\",\r",
											"    \"Veloso\", \"Viana\", \"Viegas\", \"Vieira\", \"Vila\",\r",
											"    \"Vilas\", \"Villas\", \"Vital\", \"Zamith\", \"Zanetti\"]\r",
											"\r",
											"    const randomLastName = lastName[Math.floor(Math.random() * lastName.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastName\", lastName())\r",
											"\r",
											"pm.environment.set(\"FullNameUserAdmin\", pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
											"\r",
											"function generateProvedor () {\r",
											"    const provedor = [\"@yahoo.com.br\", \"@gmail.com\", \"@hotmail.com\", \"@uol.com\", \"@outlook.com\"]\r",
											"    const randomProvedor = provedor[Math.floor(Math.random() * provedor.length)]\r",
											"    return randomProvedor\r",
											"}\r",
											"pm.environment.set(\"Provedor\", generateProvedor())\r",
											"\r",
											"pm.environment.set(\"MailUserAdmin\", pm.environment.get(\"FullName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")+\"_\"+pm.variables.replaceIn('{{$guid}}' + pm.environment.get(\"Provedor\")))\r",
											"\r",
											"function generatePassword(){\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%*\";\r",
											"    const minLength = 6;\r",
											"    const maxLength = 12;\r",
											"\r",
											"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;\r",
											"    let password = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * chars.length);\r",
											"        password += chars[randomIndex];\r",
											"    }\r",
											"\r",
											"    return password;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"PasswordUserAdmin\", generatePassword())\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.environment.set(\"UserAdminId\", responseData._id)\r",
											"\r",
											"pm.test(\"Status Code is 201\", () => {\r",
											"    pm.response.to.have.status(201)\r",
											"})\r",
											"\r",
											"pm.test(\"Verify message sucess\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgUserCreatedSucess\"))\r",
											"})\r",
											"\r",
											"pm.test(\"Verify id is not empty\", () => {\r",
											"    pm.expect(responseData._id).to.not.be.empty\r",
											"})\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{FullNameUserAdmin}}\",\r\n  \"email\": \"{{MailUserAdmin}}\",\r\n  \"password\": \"{{PasswordUserAdmin}}\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/usuarios",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Realizar login de usuário admin cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.environment.set(\"TokenAdmin\", responseData.authorization)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifiy message login sucess\", function () {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgLoginSucess\"))\r",
											"})\r",
											"\r",
											"pm.test(\"Verify token exists\", function () {\r",
											"    pm.expect(responseData).to.have.property(\"authorization\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{MailUserAdmin}}\",\r\n  \"password\": \"{{PasswordUserAdmin}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tests",
					"item": [
						{
							"name": "Cadastrar produto com usuário admin com sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function productsFirstName() {\r",
											"    const names = [   \r",
											"    \"Purezza\", \"FreshX\", \"GlowStar\", \"ShinePro\", \"BloomX\",\r",
											"    \"Radiance\", \"PurityPro\", \"EssenceX\", \"Natureza\", \"Harmonia\",\r",
											"    \"Balance\", \"Wellness\", \"Vitality\", \"BeautyPro\", \"CareMax\",\r",
											"    \"BioStar\", \"Organix\", \"FreshPro\", \"GreenX\", \"Naturalis\",\r",
											"    \"MakePro\", \"ColorX\", \"ShadePro\", \"ToneMax\", \"HueStar\",\r",
											"    \"Pigmenta\", \"ChromaX\", \"TintPro\", \"ShinePlus\", \"GlowMax\",\r",
											"    \"BeautyX\", \"FacePro\", \"LookMax\", \"StylePro\", \"ChicStar\",\r",
											"    \"TreatmentPro\", \"CarePlus\", \"HealMax\", \"RepairX\", \"RenewPro\",\r",
											"    \"RestoreStar\", \"RevivePlus\", \"RejuvenX\", \"YouthPro\", \"VitalX\",\r",
											"    \"PurePro\", \"CleanMax\", \"FreshStar\", \"PuriPlus\", \"ClaroX\",\r",
											"    \"ElitePro\", \"LuxStar\", \"PremiumX\", \"SupremePro\", \"UltraMax\",\r",
											"    \"ExclusivePlus\", \"RoyalStar\", \"DiamondX\", \"GoldPro\", \"PlatinumPlus\"\r",
											"    ]\r",
											"\r",
											"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomNames\r",
											"}\r",
											"\r",
											"pm.environment.set(\"ProductFirstName\", productsFirstName())\r",
											"\r",
											"function productsSecondName() {\r",
											"    const names = [   \r",
											"    \"Purezza\", \"FreshX\", \"GlowStar\", \"ShinePro\", \"BloomX\",\r",
											"    \"Radiance\", \"PurityPro\", \"EssenceX\", \"Natureza\", \"Harmonia\",\r",
											"    \"Balance\", \"Wellness\", \"Vitality\", \"BeautyPro\", \"CareMax\",\r",
											"    \"BioStar\", \"Organix\", \"FreshPro\", \"GreenX\", \"Naturalis\",\r",
											"    \"MakePro\", \"ColorX\", \"ShadePro\", \"ToneMax\", \"HueStar\",\r",
											"    \"Pigmenta\", \"ChromaX\", \"TintPro\", \"ShinePlus\", \"GlowMax\",\r",
											"    \"BeautyX\", \"FacePro\", \"LookMax\", \"StylePro\", \"ChicStar\",\r",
											"    \"TreatmentPro\", \"CarePlus\", \"HealMax\", \"RepairX\", \"RenewPro\",\r",
											"    \"RestoreStar\", \"RevivePlus\", \"RejuvenX\", \"YouthPro\", \"VitalX\",\r",
											"    \"PurePro\", \"CleanMax\", \"FreshStar\", \"PuriPlus\", \"ClaroX\",\r",
											"    \"ElitePro\", \"LuxStar\", \"PremiumX\", \"SupremePro\", \"UltraMax\",\r",
											"    \"ExclusivePlus\", \"RoyalStar\", \"DiamondX\", \"GoldPro\", \"PlatinumPlus\"\r",
											"    ]\r",
											"\r",
											"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomNames\r",
											"}\r",
											"\r",
											"const randomNumber = Math.floor(Math.random() * 9000) + 1000\r",
											"\r",
											"pm.environment.set(\"ProductSecondName\", productsSecondName())\r",
											"\r",
											"pm.environment.set(\"Product\", pm.environment.get(\"ProductFirstName\") + \" \" + pm.environment.get(\"ProductSecondName\") + \" \" + randomNumber)\r",
											"\r",
											"function priceProduct() {\r",
											"    return Math.round(Math.random() * (12999.99 - 9.99) + 9.99);\r",
											"}\r",
											"\r",
											"pm.environment.set(\"PriceProduct\", priceProduct())\r",
											"\r",
											"function productDescription() {\r",
											"    const description = [   \"Fórmula inovadora para resultados visíveis e duradouros\",\r",
											"    \"Desenvolvido com ingredientes selecionados para máximo desempenho\",\r",
											"    \"Tecnologia avançada para cuidados pessoais de alta qualidade\",\r",
											"    \"Solução profissional para necessidades específicas de beleza\",\r",
											"    \"Composição especial para resultados excepcionais\",\r",
											"    \"Formulação premium com ingredientes de alta pureza\",\r",
											"    \"Desenvolvimento exclusivo para tratamentos sofisticados\",\r",
											"    \"Tecnologia de ponta para cuidados avançados\",\r",
											"    \"Sistema inovador de tratamento e manutenção\",\r",
											"    \"Fórmula especial para resultados expressivos\",\r",
											"    \"Composição única para máximo benefício\",\r",
											"    \"Tecnologia de última geração para cuidados especiais\",\r",
											"    \"Desenvolvimento exclusivo para resultados superiores\",\r",
											"    \"Solução profissional de alta performance\",\r",
											"    \"Formulação avançada para necessidades específicas\",\r",
											"    \"Tecnologia premium para resultados excepcionais\",\r",
											"    \"Composição especial para cuidados intensivos\",\r",
											"    \"Sistema inovador de tratamento e proteção\",\r",
											"    \"Fórmula exclusiva para resultados duradouros\",\r",
											"    \"Desenvolvimento sofisticado para cuidados avançados\",\r",
											"    \"Tecnologia de ponta para máximo desempenho\",\r",
											"    \"Solução profissional de alta qualidade\",\r",
											"    \"Composição premium para resultados superiores\",\r",
											"    \"Formulação especial para necessidades específicas\",\r",
											"    \"Tecnologia avançada para cuidados especiais\",\r",
											"    \"Sistema inovador para tratamentos exclusivos\",\r",
											"    \"Fórmula única para resultados expressivos\",\r",
											"    \"Desenvolvimento exclusivo para máximo benefício\",\r",
											"    \"Composição de alta qualidade para cuidados especiais\",\r",
											"    \"Tecnologia sofisticada para resultados excepcionais\",\r",
											"    \"Solução premium para necessidades específicas\",\r",
											"    \"Formulação avançada para tratamentos intensivos\",\r",
											"    \"Sistema profissional de alta performance\",\r",
											"    \"Fórmula especial para resultados duradouros\",\r",
											"    \"Desenvolvimento inovador para cuidados avançados\",\r",
											"    \"Tecnologia de última geração para máximo desempenho\",\r",
											"    \"Composição exclusiva para resultados superiores\",\r",
											"    \"Solução sofisticada para necessidades específicas\",\r",
											"    \"Formulação premium para cuidados especiais\",\r",
											"    \"Sistema avançado para tratamentos exclusivos\"]\r",
											"\r",
											"    const randomDescription = description[Math.floor(Math.random() * description.length)]\r",
											"    return randomDescription\r",
											"}\r",
											"\r",
											"pm.environment.set(\"ProductDescription\", productDescription())\r",
											"\r",
											"function generateStock() {\r",
											"    // Gera uma quantidade aleatória entre 1 e 1000\r",
											"    return Math.floor(Math.random() * 1000) + 1;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"ProductQuantity\", generateStock())"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.environment.set(\"ProductId\", responseData._id)\r",
											"\r",
											"pm.test(\"Check Status Code is 201\", () => {\r",
											"    pm.response.to.have.status(201)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message product was successsfully registered\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgProductSucess\"))\r",
											"})\r",
											"\r",
											"pm.test(\"Check id is not null\", () => {\r",
											"    pm.expect(responseData._id).to.not.be.null\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{Product}}\",\r\n  \"preco\": {{PriceProduct}},\r\n  \"descricao\": \"{{ProductDescription}}\",\r\n  \"quantidade\": {{ProductQuantity}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/produtos",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar produtos com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 200\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test(\"Check properties exists and not be null\", () => {\r",
											"    pm.expect(responseData.produtos[0]).to.have.property(\"nome\").and.to.not.be.null\r",
											"    pm.expect(responseData.produtos[0]).to.have.property(\"preco\").and.to.not.be.null\r",
											"    pm.expect(responseData.produtos[0]).to.have.property(\"descricao\").and.to.not.be.null\r",
											"    pm.expect(responseData.produtos[0]).to.have.property(\"quantidade\").and.to.not.be.null\r",
											"    pm.expect(responseData.produtos[0]).to.have.property(\"_id\").and.to.not.be.null\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/produtos",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar produto por id com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 200\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test(\"Check properties exists and not be null\", () => {\r",
											"    pm.expect(responseData).to.have.property(\"nome\").and.to.not.be.null\r",
											"    pm.expect(responseData).to.have.property(\"preco\").and.to.not.be.null\r",
											"    pm.expect(responseData).to.have.property(\"descricao\").and.to.not.be.null\r",
											"    pm.expect(responseData).to.have.property(\"quantidade\").and.to.not.be.null\r",
											"    pm.expect(responseData).to.have.property(\"_id\").and.to.not.be.null\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/produtos/{{ProductId}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"produtos",
										"{{ProductId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar produto com usuário admin com sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function priceProduct() {\r",
											"    return Math.round(Math.random() * (12999.99 - 9.99) + 9.99);\r",
											"}\r",
											"\r",
											"pm.environment.set(\"NewPriceProduct\", priceProduct())"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 200\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message updated sucess\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgProductUpdatedSucess\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{Product}}\",\r\n  \"preco\": {{NewPriceProduct}},\r\n  \"descricao\": \"{{ProductDescription}}\",\r\n  \"quantidade\": {{ProductQuantity}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/produtos/{{ProductId}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"produtos",
										"{{ProductId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar produto por id após atualização",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 200\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test(\"Check properties exists and not be null\", () => {\r",
											"    pm.expect(responseData).to.have.property(\"nome\").and.to.not.be.null\r",
											"    pm.expect(responseData).to.have.property(\"preco\").and.to.not.be.null\r",
											"    pm.expect(responseData).to.have.property(\"descricao\").and.to.not.be.null\r",
											"    pm.expect(responseData).to.have.property(\"quantidade\").and.to.not.be.null\r",
											"    pm.expect(responseData).to.have.property(\"_id\").and.to.not.be.null\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/produtos/{{ProductId}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"produtos",
										"{{ProductId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir produto com usuário admin com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 200\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message deleted sucess\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgProductDeletedSucess\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/produtos/{{ProductId}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"produtos",
										"{{ProductId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar produto por id após exclusão",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"/*pm.test(\"Check message user not found\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"\"))\r",
											"})*/"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/produtos/{{ProductId}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"produtos",
										"{{ProductId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Exceptions",
					"item": [
						{
							"name": "Cadastrar produto em duplicidade",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message product duplicated\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgProductDuplicated\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function productsFirstName() {\r",
											"    const names = [   \r",
											"    \"Purezza\", \"FreshX\", \"GlowStar\", \"ShinePro\", \"BloomX\",\r",
											"    \"Radiance\", \"PurityPro\", \"EssenceX\", \"Natureza\", \"Harmonia\",\r",
											"    \"Balance\", \"Wellness\", \"Vitality\", \"BeautyPro\", \"CareMax\",\r",
											"    \"BioStar\", \"Organix\", \"FreshPro\", \"GreenX\", \"Naturalis\",\r",
											"    \"MakePro\", \"ColorX\", \"ShadePro\", \"ToneMax\", \"HueStar\",\r",
											"    \"Pigmenta\", \"ChromaX\", \"TintPro\", \"ShinePlus\", \"GlowMax\",\r",
											"    \"BeautyX\", \"FacePro\", \"LookMax\", \"StylePro\", \"ChicStar\",\r",
											"    \"TreatmentPro\", \"CarePlus\", \"HealMax\", \"RepairX\", \"RenewPro\",\r",
											"    \"RestoreStar\", \"RevivePlus\", \"RejuvenX\", \"YouthPro\", \"VitalX\",\r",
											"    \"PurePro\", \"CleanMax\", \"FreshStar\", \"PuriPlus\", \"ClaroX\",\r",
											"    \"ElitePro\", \"LuxStar\", \"PremiumX\", \"SupremePro\", \"UltraMax\",\r",
											"    \"ExclusivePlus\", \"RoyalStar\", \"DiamondX\", \"GoldPro\", \"PlatinumPlus\"\r",
											"    ]\r",
											"\r",
											"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomNames\r",
											"}\r",
											"\r",
											"pm.environment.set(\"ProductFirstName\", productsFirstName())\r",
											"\r",
											"function productsSecondName() {\r",
											"    const names = [   \r",
											"    \"Purezza\", \"FreshX\", \"GlowStar\", \"ShinePro\", \"BloomX\",\r",
											"    \"Radiance\", \"PurityPro\", \"EssenceX\", \"Natureza\", \"Harmonia\",\r",
											"    \"Balance\", \"Wellness\", \"Vitality\", \"BeautyPro\", \"CareMax\",\r",
											"    \"BioStar\", \"Organix\", \"FreshPro\", \"GreenX\", \"Naturalis\",\r",
											"    \"MakePro\", \"ColorX\", \"ShadePro\", \"ToneMax\", \"HueStar\",\r",
											"    \"Pigmenta\", \"ChromaX\", \"TintPro\", \"ShinePlus\", \"GlowMax\",\r",
											"    \"BeautyX\", \"FacePro\", \"LookMax\", \"StylePro\", \"ChicStar\",\r",
											"    \"TreatmentPro\", \"CarePlus\", \"HealMax\", \"RepairX\", \"RenewPro\",\r",
											"    \"RestoreStar\", \"RevivePlus\", \"RejuvenX\", \"YouthPro\", \"VitalX\",\r",
											"    \"PurePro\", \"CleanMax\", \"FreshStar\", \"PuriPlus\", \"ClaroX\",\r",
											"    \"ElitePro\", \"LuxStar\", \"PremiumX\", \"SupremePro\", \"UltraMax\",\r",
											"    \"ExclusivePlus\", \"RoyalStar\", \"DiamondX\", \"GoldPro\", \"PlatinumPlus\"\r",
											"    ]\r",
											"\r",
											"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomNames\r",
											"}\r",
											"\r",
											"const randomNumber = Math.floor(Math.random() * 9000) + 1000\r",
											"\r",
											"pm.environment.set(\"ProductSecondName\", productsSecondName())\r",
											"\r",
											"pm.environment.set(\"Product\", pm.environment.get(\"ProductFirstName\") + \" \" + pm.environment.get(\"ProductSecondName\") + \" \" + randomNumber)\r",
											"\r",
											"function priceProduct() {\r",
											"    return Math.round(Math.random() * (12999.99 - 9.99) + 9.99);\r",
											"}\r",
											"\r",
											"pm.environment.set(\"PriceProduct\", priceProduct())\r",
											"\r",
											"function productDescription() {\r",
											"    const description = [   \"Fórmula inovadora para resultados visíveis e duradouros\",\r",
											"    \"Desenvolvido com ingredientes selecionados para máximo desempenho\",\r",
											"    \"Tecnologia avançada para cuidados pessoais de alta qualidade\",\r",
											"    \"Solução profissional para necessidades específicas de beleza\",\r",
											"    \"Composição especial para resultados excepcionais\",\r",
											"    \"Formulação premium com ingredientes de alta pureza\",\r",
											"    \"Desenvolvimento exclusivo para tratamentos sofisticados\",\r",
											"    \"Tecnologia de ponta para cuidados avançados\",\r",
											"    \"Sistema inovador de tratamento e manutenção\",\r",
											"    \"Fórmula especial para resultados expressivos\",\r",
											"    \"Composição única para máximo benefício\",\r",
											"    \"Tecnologia de última geração para cuidados especiais\",\r",
											"    \"Desenvolvimento exclusivo para resultados superiores\",\r",
											"    \"Solução profissional de alta performance\",\r",
											"    \"Formulação avançada para necessidades específicas\",\r",
											"    \"Tecnologia premium para resultados excepcionais\",\r",
											"    \"Composição especial para cuidados intensivos\",\r",
											"    \"Sistema inovador de tratamento e proteção\",\r",
											"    \"Fórmula exclusiva para resultados duradouros\",\r",
											"    \"Desenvolvimento sofisticado para cuidados avançados\",\r",
											"    \"Tecnologia de ponta para máximo desempenho\",\r",
											"    \"Solução profissional de alta qualidade\",\r",
											"    \"Composição premium para resultados superiores\",\r",
											"    \"Formulação especial para necessidades específicas\",\r",
											"    \"Tecnologia avançada para cuidados especiais\",\r",
											"    \"Sistema inovador para tratamentos exclusivos\",\r",
											"    \"Fórmula única para resultados expressivos\",\r",
											"    \"Desenvolvimento exclusivo para máximo benefício\",\r",
											"    \"Composição de alta qualidade para cuidados especiais\",\r",
											"    \"Tecnologia sofisticada para resultados excepcionais\",\r",
											"    \"Solução premium para necessidades específicas\",\r",
											"    \"Formulação avançada para tratamentos intensivos\",\r",
											"    \"Sistema profissional de alta performance\",\r",
											"    \"Fórmula especial para resultados duradouros\",\r",
											"    \"Desenvolvimento inovador para cuidados avançados\",\r",
											"    \"Tecnologia de última geração para máximo desempenho\",\r",
											"    \"Composição exclusiva para resultados superiores\",\r",
											"    \"Solução sofisticada para necessidades específicas\",\r",
											"    \"Formulação premium para cuidados especiais\",\r",
											"    \"Sistema avançado para tratamentos exclusivos\"]\r",
											"\r",
											"    const randomDescription = description[Math.floor(Math.random() * description.length)]\r",
											"    return randomDescription\r",
											"}\r",
											"\r",
											"pm.environment.set(\"ProductDescription\", productDescription())\r",
											"\r",
											"function generateStock() {\r",
											"    // Gera uma quantidade aleatória entre 1 e 1000\r",
											"    return Math.floor(Math.random() * 1000) + 1;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"ProductQuantity\", generateStock())"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{ProductDuplicate}}\",\r\n  \"preco\": {{PriceProduct}},\r\n  \"descricao\": \"{{ProductDescription}}\",\r\n  \"quantidade\": {{ProductQuantity}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/produtos",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar produto sem utilizar token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function productsFirstName() {\r",
											"    const names = [   \r",
											"    \"Purezza\", \"FreshX\", \"GlowStar\", \"ShinePro\", \"BloomX\",\r",
											"    \"Radiance\", \"PurityPro\", \"EssenceX\", \"Natureza\", \"Harmonia\",\r",
											"    \"Balance\", \"Wellness\", \"Vitality\", \"BeautyPro\", \"CareMax\",\r",
											"    \"BioStar\", \"Organix\", \"FreshPro\", \"GreenX\", \"Naturalis\",\r",
											"    \"MakePro\", \"ColorX\", \"ShadePro\", \"ToneMax\", \"HueStar\",\r",
											"    \"Pigmenta\", \"ChromaX\", \"TintPro\", \"ShinePlus\", \"GlowMax\",\r",
											"    \"BeautyX\", \"FacePro\", \"LookMax\", \"StylePro\", \"ChicStar\",\r",
											"    \"TreatmentPro\", \"CarePlus\", \"HealMax\", \"RepairX\", \"RenewPro\",\r",
											"    \"RestoreStar\", \"RevivePlus\", \"RejuvenX\", \"YouthPro\", \"VitalX\",\r",
											"    \"PurePro\", \"CleanMax\", \"FreshStar\", \"PuriPlus\", \"ClaroX\",\r",
											"    \"ElitePro\", \"LuxStar\", \"PremiumX\", \"SupremePro\", \"UltraMax\",\r",
											"    \"ExclusivePlus\", \"RoyalStar\", \"DiamondX\", \"GoldPro\", \"PlatinumPlus\"\r",
											"    ]\r",
											"\r",
											"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomNames\r",
											"}\r",
											"\r",
											"pm.environment.set(\"ProductFirstName\", productsFirstName())\r",
											"\r",
											"function productsSecondName() {\r",
											"    const names = [   \r",
											"    \"Purezza\", \"FreshX\", \"GlowStar\", \"ShinePro\", \"BloomX\",\r",
											"    \"Radiance\", \"PurityPro\", \"EssenceX\", \"Natureza\", \"Harmonia\",\r",
											"    \"Balance\", \"Wellness\", \"Vitality\", \"BeautyPro\", \"CareMax\",\r",
											"    \"BioStar\", \"Organix\", \"FreshPro\", \"GreenX\", \"Naturalis\",\r",
											"    \"MakePro\", \"ColorX\", \"ShadePro\", \"ToneMax\", \"HueStar\",\r",
											"    \"Pigmenta\", \"ChromaX\", \"TintPro\", \"ShinePlus\", \"GlowMax\",\r",
											"    \"BeautyX\", \"FacePro\", \"LookMax\", \"StylePro\", \"ChicStar\",\r",
											"    \"TreatmentPro\", \"CarePlus\", \"HealMax\", \"RepairX\", \"RenewPro\",\r",
											"    \"RestoreStar\", \"RevivePlus\", \"RejuvenX\", \"YouthPro\", \"VitalX\",\r",
											"    \"PurePro\", \"CleanMax\", \"FreshStar\", \"PuriPlus\", \"ClaroX\",\r",
											"    \"ElitePro\", \"LuxStar\", \"PremiumX\", \"SupremePro\", \"UltraMax\",\r",
											"    \"ExclusivePlus\", \"RoyalStar\", \"DiamondX\", \"GoldPro\", \"PlatinumPlus\"\r",
											"    ]\r",
											"\r",
											"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomNames\r",
											"}\r",
											"\r",
											"const randomNumber = Math.floor(Math.random() * 9000) + 1000\r",
											"\r",
											"pm.environment.set(\"ProductSecondName\", productsSecondName())\r",
											"\r",
											"pm.environment.set(\"Product\", pm.environment.get(\"ProductFirstName\") + \" \" + pm.environment.get(\"ProductSecondName\") + \" \" + randomNumber)\r",
											"\r",
											"function priceProduct() {\r",
											"    return Math.round(Math.random() * (12999.99 - 9.99) + 9.99);\r",
											"}\r",
											"\r",
											"pm.environment.set(\"PriceProduct\", priceProduct())\r",
											"\r",
											"function productDescription() {\r",
											"    const description = [   \"Fórmula inovadora para resultados visíveis e duradouros\",\r",
											"    \"Desenvolvido com ingredientes selecionados para máximo desempenho\",\r",
											"    \"Tecnologia avançada para cuidados pessoais de alta qualidade\",\r",
											"    \"Solução profissional para necessidades específicas de beleza\",\r",
											"    \"Composição especial para resultados excepcionais\",\r",
											"    \"Formulação premium com ingredientes de alta pureza\",\r",
											"    \"Desenvolvimento exclusivo para tratamentos sofisticados\",\r",
											"    \"Tecnologia de ponta para cuidados avançados\",\r",
											"    \"Sistema inovador de tratamento e manutenção\",\r",
											"    \"Fórmula especial para resultados expressivos\",\r",
											"    \"Composição única para máximo benefício\",\r",
											"    \"Tecnologia de última geração para cuidados especiais\",\r",
											"    \"Desenvolvimento exclusivo para resultados superiores\",\r",
											"    \"Solução profissional de alta performance\",\r",
											"    \"Formulação avançada para necessidades específicas\",\r",
											"    \"Tecnologia premium para resultados excepcionais\",\r",
											"    \"Composição especial para cuidados intensivos\",\r",
											"    \"Sistema inovador de tratamento e proteção\",\r",
											"    \"Fórmula exclusiva para resultados duradouros\",\r",
											"    \"Desenvolvimento sofisticado para cuidados avançados\",\r",
											"    \"Tecnologia de ponta para máximo desempenho\",\r",
											"    \"Solução profissional de alta qualidade\",\r",
											"    \"Composição premium para resultados superiores\",\r",
											"    \"Formulação especial para necessidades específicas\",\r",
											"    \"Tecnologia avançada para cuidados especiais\",\r",
											"    \"Sistema inovador para tratamentos exclusivos\",\r",
											"    \"Fórmula única para resultados expressivos\",\r",
											"    \"Desenvolvimento exclusivo para máximo benefício\",\r",
											"    \"Composição de alta qualidade para cuidados especiais\",\r",
											"    \"Tecnologia sofisticada para resultados excepcionais\",\r",
											"    \"Solução premium para necessidades específicas\",\r",
											"    \"Formulação avançada para tratamentos intensivos\",\r",
											"    \"Sistema profissional de alta performance\",\r",
											"    \"Fórmula especial para resultados duradouros\",\r",
											"    \"Desenvolvimento inovador para cuidados avançados\",\r",
											"    \"Tecnologia de última geração para máximo desempenho\",\r",
											"    \"Composição exclusiva para resultados superiores\",\r",
											"    \"Solução sofisticada para necessidades específicas\",\r",
											"    \"Formulação premium para cuidados especiais\",\r",
											"    \"Sistema avançado para tratamentos exclusivos\"]\r",
											"\r",
											"    const randomDescription = description[Math.floor(Math.random() * description.length)]\r",
											"    return randomDescription\r",
											"}\r",
											"\r",
											"pm.environment.set(\"ProductDescription\", productDescription())\r",
											"\r",
											"function generateStock() {\r",
											"    // Gera uma quantidade aleatória entre 1 e 1000\r",
											"    return Math.floor(Math.random() * 1000) + 1;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"ProductQuantity\", generateStock())"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 401\", () => {\r",
											"    pm.response.to.have.status(401)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message product without token\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgErrorToken\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{Product}}\",\r\n  \"preco\": {{PriceProduct}},\r\n  \"descricao\": \"{{ProductDescription}}\",\r\n  \"quantidade\": {{ProductQuantity}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/produtos",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar produtos utilizando preco inválido por query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message invalid price\", () => {\r",
											"    pm.expect(responseData.preco).to.eql(pm.globals.get(\"MsgInvalidPrice\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/produtos?preco=000",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"produtos"
									],
									"query": [
										{
											"key": "preco",
											"value": "000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar produtos utilizando quantidade inválida por query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message invalid quantity\", () => {\r",
											"    pm.expect(responseData.quantidade).to.eql(pm.globals.get(\"MsgInvalidQuantity\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/produtos?quantidade=-25",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"produtos"
									],
									"query": [
										{
											"key": "quantidade",
											"value": "-25"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar produto sem informar um token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function priceProduct() {\r",
											"    return Math.round(Math.random() * (12999.99 - 9.99) + 9.99);\r",
											"}\r",
											"\r",
											"pm.environment.set(\"NewPriceProduct\", priceProduct())"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 401\", () => {\r",
											"    pm.response.to.have.status(401)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message invalid token\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgErrorToken\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{Product}}\",\r\n  \"preco\": {{NewPriceProduct}},\r\n  \"descricao\": \"{{ProductDescription}}\",\r\n  \"quantidade\": {{ProductQuantity}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/produtos/{{ProductId}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"produtos",
										"{{ProductId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir produto sem informar um token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 401\", () => {\r",
											"    pm.response.to.have.status(401)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message invalid token\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgErrorToken\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/produtos/{{ProductId}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"produtos",
										"{{ProductId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Exception - Cadastro, atualização e exclusão admin false",
					"item": [
						{
							"name": "Cadastrar usuário com sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstName() {\r",
											"    const names = [\"Ana\", \"Maria\", \"Joana\", \"Luiza\", \"Beatriz\",\r",
											"    \"Gabriela\", \"Julia\", \"Luisa\", \"Carolina\", \"Isabel\",\r",
											"    \"Eduarda\", \"Alice\", \"Laura\", \"Marcela\", \"Rafaela\",\r",
											"    \"Clarice\", \"Helena\", \"Daniela\", \"Adriana\", \"Patricia\",\r",
											"    \"Vanessa\", \"Camila\", \"Fernanda\", \"Priscila\", \"Raquel\",\r",
											"    \"Simone\", \"Andrea\", \"Luciana\", \"Elaine\", \"Monica\",\r",
											"    \"Silvia\", \"Regina\", \"Claudia\", \"Gisele\", \"Bruna\",\r",
											"    \"Thais\", \"Yasmin\", \"Nathalia\", \"Sabrina\", \"Vivian\",\r",
											"    \"Geovana\", \"Francisca\", \"Rosangela\", \"Elizabete\", \"Janaina\",\r",
											"    \"Marcia\", \"Sandra\", \"Eliane\", \"Denise\", \"Luciene\",\"Pedro\", \"Lucas\", \"Gabriel\",\"Matheus\", \"Guilherme\",  \"Felipe\", \"Bernardo\", \"Rafael\", \"Vinicius\", \"Henrique\",\r",
											"    \"Leonardo\", \"Enzo\", \"Benjamin\", \"Nicolas\", \"Pietro\",\r",
											"    \"Murilo\", \"Arthur\", \"Heitor\", \"Bryan\", \"Caio\",\r",
											"    \"Tiago\", \"Rodrigo\", \"Daniel\", \"Bruno\", \"Victor\",\r",
											"    \"Alexandre\", \"Paulo\", \"Carlos\", \"Anderson\", \"William\",\r",
											"    \"Diego\", \"Eduardo\", \"Marcelo\", \"Renan\", \"Leandro\",\r",
											"    \"Douglas\", \"Thiago\", \"Joao\", \"Felippe\", \"Augusto\",\r",
											"    \"Otavio\", \"Francisco\", \"Antonio\", \"Juliano\", \"Marco\",\r",
											"    \"Mario\", \"Roberto\", \"Ricardo\", \"Andre\", \"Fabio\"]\r",
											"\r",
											"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomNames\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstName\", firstName())\r",
											"\r",
											"function lastName() {\r",
											"\r",
											"    const lastName = [\r",
											"    \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
											"    \"Alves\", \"Ferreira\", \"Costa\", \"Gomes\", \"Martins\",\r",
											"    \"Lima\", \"Garcia\", \"Dias\", \"Mendes\", \"Rocha\",\r",
											"    \"Nunes\", \"Pereira\", \"Carvalho\", \"Sousa\", \"Barbosa\",\r",
											"    \"Coelho\", \"Cruz\", \"Henrique\", \"Freitas\", \"Monteiro\",\r",
											"    \"Araujo\", \"Cardoso\", \"Fonseca\", \"Campos\", \"Melo\",\r",
											"    \"Albuquerque\", \"Andrade\", \"Antunes\", \"Amorim\", \"Azevedo\",\r",
											"    \"Batista\", \"Bernardes\", \"Botelho\", \"Camargo\", \"Carmo\",\r",
											"    \"Carvalho\", \"Castro\", \"Coutinho\", \"Couto\", \"Cunha\",\r",
											"    \"Duarte\", \"Figueiredo\", \"Frota\", \"Furtado\", \"Goncalves\",\r",
											"    \"Lopes\", \"Machado\", \"Marques\", \"Matos\", \"Medeiros\",\r",
											"    \"Moraes\", \"Moreira\", \"Moura\", \"Nascimento\", \"Nogueira\",\r",
											"    \"Oliveira\", \"Pacheco\", \"Paiva\", \"Paula\", \"Pinto\",\r",
											"    \"Pires\", \"Queiroz\", \"Ramos\", \"Reis\", \"Ribeiro\",\r",
											"    \"Sampaio\", \"Santana\", \"Santiago\", \"Santos\", \"Severino\",\r",
											"    \"Siqueira\", \"Soares\", \"Teixeira\", \"Torres\", \"Vasconcelos\",\r",
											"    \"Vieira\", \"Vilela\", \"Xavier\", \"Abreu\", \"Almeida\",\r",
											"    \"Alvares\", \"Aragao\", \"Araujo\", \"Barros\", \"Bastos\",\r",
											"    \"Brito\", \"Cabral\", \"Correia\", \"Correa\", \"Domingues\",\r",
											"    \"Escobar\", \"Esteves\", \"Faria\", \"Fernandes\", \"Ferraz\",\r",
											"    \"Franca\", \"Franco\", \"Guedes\", \"Leal\", \"Leite\",\r",
											"    \"Lopes\", \"Lourenco\", \"Maciel\", \"Magalhaes\", \"Maia\",\r",
											"    \"Marinho\", \"Mattos\", \"Menezes\", \"Miranda\", \"Moraes\",\r",
											"    \"Morais\", \"Mourao\", \"Navarro\", \"Neves\", \"Nobre\",\r",
											"    \"Ochoa\", \"Pessoa\", \"Pinheiro\", \"Porto\", \"Quintela\",\r",
											"    \"Rangel\", \"Rego\", \"Ribeiro\", \"Rocha\", \"Rosario\",\r",
											"    \"Sales\", \"Santoro\", \"Saraiva\", \"Sarmento\", \"Seabra\",\r",
											"    \"Sena\", \"Serra\", \"Serrano\", \"Silveira\", \"Simoes\",\r",
											"    \"Soeiro\", \"Tavares\", \"Teles\", \"Tenorio\", \"Terra\",\r",
											"    \"Valente\", \"Valentim\", \"Vargas\", \"Vasques\", \"Veiga\",\r",
											"    \"Veloso\", \"Viana\", \"Viegas\", \"Vieira\", \"Vila\",\r",
											"    \"Vilas\", \"Villas\", \"Vital\", \"Zamith\", \"Zanetti\"]\r",
											"\r",
											"    const randomLastName = lastName[Math.floor(Math.random() * lastName.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastName\", lastName())\r",
											"\r",
											"pm.environment.set(\"FullNameUserAdmin\", pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
											"\r",
											"function generateProvedor () {\r",
											"    const provedor = [\"@yahoo.com.br\", \"@gmail.com\", \"@hotmail.com\", \"@uol.com\", \"@outlook.com\"]\r",
											"    const randomProvedor = provedor[Math.floor(Math.random() * provedor.length)]\r",
											"    return randomProvedor\r",
											"}\r",
											"pm.environment.set(\"Provedor\", generateProvedor())\r",
											"\r",
											"pm.environment.set(\"MailUserAdmin\", pm.environment.get(\"FullName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")+\"_\"+pm.variables.replaceIn('{{$guid}}' + pm.environment.get(\"Provedor\")))\r",
											"\r",
											"function generatePassword(){\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%*\";\r",
											"    const minLength = 6;\r",
											"    const maxLength = 12;\r",
											"\r",
											"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;\r",
											"    let password = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * chars.length);\r",
											"        password += chars[randomIndex];\r",
											"    }\r",
											"\r",
											"    return password;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"PasswordUserAdmin\", generatePassword())\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.environment.set(\"UserID\", responseData._id)\r",
											"\r",
											"pm.test(\"Status Code is 201\", () => {\r",
											"    pm.response.to.have.status(201)\r",
											"})\r",
											"\r",
											"pm.test(\"Verify message sucess\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgUserCreatedSucess\"))\r",
											"})\r",
											"\r",
											"pm.test(\"Verify id is not empty\", () => {\r",
											"    pm.expect(responseData._id).to.not.be.empty\r",
											"})\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{FullNameUser}}\",\r\n  \"email\": \"{{MailUser}}\",\r\n  \"password\": \"{{PasswordUser}}\",\r\n  \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/usuarios",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Realizar login de usuário cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.environment.set(\"TokenUser\", responseData.authorization)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifiy message login sucess\", function () {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgLoginSucess\"))\r",
											"})\r",
											"\r",
											"pm.test(\"Verify token exists\", function () {\r",
											"    pm.expect(responseData).to.have.property(\"authorization\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{TokenUser}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{MailUser}}\",\r\n  \"password\": \"{{PasswordUser}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar produto com usuário admin false",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function productsFirstName() {\r",
											"    const names = [   \r",
											"    \"Purezza\", \"FreshX\", \"GlowStar\", \"ShinePro\", \"BloomX\",\r",
											"    \"Radiance\", \"PurityPro\", \"EssenceX\", \"Natureza\", \"Harmonia\",\r",
											"    \"Balance\", \"Wellness\", \"Vitality\", \"BeautyPro\", \"CareMax\",\r",
											"    \"BioStar\", \"Organix\", \"FreshPro\", \"GreenX\", \"Naturalis\",\r",
											"    \"MakePro\", \"ColorX\", \"ShadePro\", \"ToneMax\", \"HueStar\",\r",
											"    \"Pigmenta\", \"ChromaX\", \"TintPro\", \"ShinePlus\", \"GlowMax\",\r",
											"    \"BeautyX\", \"FacePro\", \"LookMax\", \"StylePro\", \"ChicStar\",\r",
											"    \"TreatmentPro\", \"CarePlus\", \"HealMax\", \"RepairX\", \"RenewPro\",\r",
											"    \"RestoreStar\", \"RevivePlus\", \"RejuvenX\", \"YouthPro\", \"VitalX\",\r",
											"    \"PurePro\", \"CleanMax\", \"FreshStar\", \"PuriPlus\", \"ClaroX\",\r",
											"    \"ElitePro\", \"LuxStar\", \"PremiumX\", \"SupremePro\", \"UltraMax\",\r",
											"    \"ExclusivePlus\", \"RoyalStar\", \"DiamondX\", \"GoldPro\", \"PlatinumPlus\"\r",
											"    ]\r",
											"\r",
											"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomNames\r",
											"}\r",
											"\r",
											"pm.environment.set(\"ProductFirstName\", productsFirstName())\r",
											"\r",
											"function productsSecondName() {\r",
											"    const names = [   \r",
											"    \"Purezza\", \"FreshX\", \"GlowStar\", \"ShinePro\", \"BloomX\",\r",
											"    \"Radiance\", \"PurityPro\", \"EssenceX\", \"Natureza\", \"Harmonia\",\r",
											"    \"Balance\", \"Wellness\", \"Vitality\", \"BeautyPro\", \"CareMax\",\r",
											"    \"BioStar\", \"Organix\", \"FreshPro\", \"GreenX\", \"Naturalis\",\r",
											"    \"MakePro\", \"ColorX\", \"ShadePro\", \"ToneMax\", \"HueStar\",\r",
											"    \"Pigmenta\", \"ChromaX\", \"TintPro\", \"ShinePlus\", \"GlowMax\",\r",
											"    \"BeautyX\", \"FacePro\", \"LookMax\", \"StylePro\", \"ChicStar\",\r",
											"    \"TreatmentPro\", \"CarePlus\", \"HealMax\", \"RepairX\", \"RenewPro\",\r",
											"    \"RestoreStar\", \"RevivePlus\", \"RejuvenX\", \"YouthPro\", \"VitalX\",\r",
											"    \"PurePro\", \"CleanMax\", \"FreshStar\", \"PuriPlus\", \"ClaroX\",\r",
											"    \"ElitePro\", \"LuxStar\", \"PremiumX\", \"SupremePro\", \"UltraMax\",\r",
											"    \"ExclusivePlus\", \"RoyalStar\", \"DiamondX\", \"GoldPro\", \"PlatinumPlus\"\r",
											"    ]\r",
											"\r",
											"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomNames\r",
											"}\r",
											"\r",
											"const randomNumber = Math.floor(Math.random() * 9000) + 1000\r",
											"\r",
											"pm.environment.set(\"ProductSecondName\", productsSecondName())\r",
											"\r",
											"pm.environment.set(\"Product\", pm.environment.get(\"ProductFirstName\") + \" \" + pm.environment.get(\"ProductSecondName\") + \" \" + randomNumber)\r",
											"\r",
											"function priceProduct() {\r",
											"    return Math.round(Math.random() * (12999.99 - 9.99) + 9.99);\r",
											"}\r",
											"\r",
											"pm.environment.set(\"PriceProduct\", priceProduct())\r",
											"\r",
											"function productDescription() {\r",
											"    const description = [   \"Fórmula inovadora para resultados visíveis e duradouros\",\r",
											"    \"Desenvolvido com ingredientes selecionados para máximo desempenho\",\r",
											"    \"Tecnologia avançada para cuidados pessoais de alta qualidade\",\r",
											"    \"Solução profissional para necessidades específicas de beleza\",\r",
											"    \"Composição especial para resultados excepcionais\",\r",
											"    \"Formulação premium com ingredientes de alta pureza\",\r",
											"    \"Desenvolvimento exclusivo para tratamentos sofisticados\",\r",
											"    \"Tecnologia de ponta para cuidados avançados\",\r",
											"    \"Sistema inovador de tratamento e manutenção\",\r",
											"    \"Fórmula especial para resultados expressivos\",\r",
											"    \"Composição única para máximo benefício\",\r",
											"    \"Tecnologia de última geração para cuidados especiais\",\r",
											"    \"Desenvolvimento exclusivo para resultados superiores\",\r",
											"    \"Solução profissional de alta performance\",\r",
											"    \"Formulação avançada para necessidades específicas\",\r",
											"    \"Tecnologia premium para resultados excepcionais\",\r",
											"    \"Composição especial para cuidados intensivos\",\r",
											"    \"Sistema inovador de tratamento e proteção\",\r",
											"    \"Fórmula exclusiva para resultados duradouros\",\r",
											"    \"Desenvolvimento sofisticado para cuidados avançados\",\r",
											"    \"Tecnologia de ponta para máximo desempenho\",\r",
											"    \"Solução profissional de alta qualidade\",\r",
											"    \"Composição premium para resultados superiores\",\r",
											"    \"Formulação especial para necessidades específicas\",\r",
											"    \"Tecnologia avançada para cuidados especiais\",\r",
											"    \"Sistema inovador para tratamentos exclusivos\",\r",
											"    \"Fórmula única para resultados expressivos\",\r",
											"    \"Desenvolvimento exclusivo para máximo benefício\",\r",
											"    \"Composição de alta qualidade para cuidados especiais\",\r",
											"    \"Tecnologia sofisticada para resultados excepcionais\",\r",
											"    \"Solução premium para necessidades específicas\",\r",
											"    \"Formulação avançada para tratamentos intensivos\",\r",
											"    \"Sistema profissional de alta performance\",\r",
											"    \"Fórmula especial para resultados duradouros\",\r",
											"    \"Desenvolvimento inovador para cuidados avançados\",\r",
											"    \"Tecnologia de última geração para máximo desempenho\",\r",
											"    \"Composição exclusiva para resultados superiores\",\r",
											"    \"Solução sofisticada para necessidades específicas\",\r",
											"    \"Formulação premium para cuidados especiais\",\r",
											"    \"Sistema avançado para tratamentos exclusivos\"]\r",
											"\r",
											"    const randomDescription = description[Math.floor(Math.random() * description.length)]\r",
											"    return randomDescription\r",
											"}\r",
											"\r",
											"pm.environment.set(\"ProductDescription\", productDescription())\r",
											"\r",
											"function generateStock() {\r",
											"    // Gera uma quantidade aleatória entre 1 e 1000\r",
											"    return Math.floor(Math.random() * 1000) + 1;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"ProductQuantity\", generateStock())"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 403\", () => {\r",
											"    pm.response.to.have.status(403)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message user admin false\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgRouteAdmin\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{TokenUser}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{Product}}\",\r\n  \"preco\": {{PriceProduct}},\r\n  \"descricao\": \"{{ProductDescription}}\",\r\n  \"quantidade\": {{ProductQuantity}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/produtos",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar produto com token de usuário admin false",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function priceProduct() {\r",
											"    return Math.round(Math.random() * (12999.99 - 9.99) + 9.99);\r",
											"}\r",
											"\r",
											"pm.environment.set(\"NewPriceProduct\", priceProduct())"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 403\", () => {\r",
											"    pm.response.to.have.status(403)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message user admin false\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgRouteAdmin\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{TokenUser}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{Product}}\",\r\n  \"preco\": {{NewPriceProduct}},\r\n  \"descricao\": \"{{ProductDescription}}\",\r\n  \"quantidade\": {{ProductQuantity}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/produtos/{{ProductId}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"produtos",
										"{{ProductId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir produto com usuário admin false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 403\", () => {\r",
											"    pm.response.to.have.status(403)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message user admin false\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgRouteAdmin\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{TokenUser}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/produtos/{{ProductId}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"produtos",
										"{{ProductId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Teardown",
					"item": [
						{
							"name": "Excluir usuário por id com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 200\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test(\"Verify message user deleted sucess\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgUserDeletedSucess\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/usuarios/{{UserID}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"usuarios",
										"{{UserID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir usuário admin por id com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 200\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test(\"Verify message user deleted sucess\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgUserDeletedSucess\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/usuarios/{{UserAdminId}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"usuarios",
										"{{UserAdminId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Consultar os produtos cadastrados ou gerenciar os produtos da loja (somente administrador).\n\nTest Setup - dependências necessárias para realização dos testes.\n\nTests - testes de sucesso e falha relacionados ao endpoint de produtos.\n\nTest Teardown - exclusão das dependências necessárias para realizar os testes",
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "key",
						"value": "Authorization",
						"type": "string"
					},
					{
						"key": "value",
						"value": "{{TokenAdmin}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Carrinhos",
			"item": [
				{
					"name": "Test Setup",
					"item": [
						{
							"name": "Realizar Login Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.environment.set(\"Token\", responseData.authorization)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifiy message login sucess\", function () {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgLoginSucess\"))\r",
											"})\r",
											"\r",
											"pm.test(\"Verify token exists\", function () {\r",
											"    pm.expect(responseData).to.have.property(\"authorization\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{EmailModel}}\",\r\n  \"password\": \"{{PasswordModel}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar usuário admin com sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstName() {\r",
											"    const names = [\"Ana\", \"Maria\", \"Joana\", \"Luiza\", \"Beatriz\",\r",
											"    \"Gabriela\", \"Julia\", \"Luisa\", \"Carolina\", \"Isabel\",\r",
											"    \"Eduarda\", \"Alice\", \"Laura\", \"Marcela\", \"Rafaela\",\r",
											"    \"Clarice\", \"Helena\", \"Daniela\", \"Adriana\", \"Patricia\",\r",
											"    \"Vanessa\", \"Camila\", \"Fernanda\", \"Priscila\", \"Raquel\",\r",
											"    \"Simone\", \"Andrea\", \"Luciana\", \"Elaine\", \"Monica\",\r",
											"    \"Silvia\", \"Regina\", \"Claudia\", \"Gisele\", \"Bruna\",\r",
											"    \"Thais\", \"Yasmin\", \"Nathalia\", \"Sabrina\", \"Vivian\",\r",
											"    \"Geovana\", \"Francisca\", \"Rosangela\", \"Elizabete\", \"Janaina\",\r",
											"    \"Marcia\", \"Sandra\", \"Eliane\", \"Denise\", \"Luciene\",\"Pedro\", \"Lucas\", \"Gabriel\",\"Matheus\", \"Guilherme\",  \"Felipe\", \"Bernardo\", \"Rafael\", \"Vinicius\", \"Henrique\",\r",
											"    \"Leonardo\", \"Enzo\", \"Benjamin\", \"Nicolas\", \"Pietro\",\r",
											"    \"Murilo\", \"Arthur\", \"Heitor\", \"Bryan\", \"Caio\",\r",
											"    \"Tiago\", \"Rodrigo\", \"Daniel\", \"Bruno\", \"Victor\",\r",
											"    \"Alexandre\", \"Paulo\", \"Carlos\", \"Anderson\", \"William\",\r",
											"    \"Diego\", \"Eduardo\", \"Marcelo\", \"Renan\", \"Leandro\",\r",
											"    \"Douglas\", \"Thiago\", \"Joao\", \"Felippe\", \"Augusto\",\r",
											"    \"Otavio\", \"Francisco\", \"Antonio\", \"Juliano\", \"Marco\",\r",
											"    \"Mario\", \"Roberto\", \"Ricardo\", \"Andre\", \"Fabio\"]\r",
											"\r",
											"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomNames\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstName\", firstName())\r",
											"\r",
											"function lastName() {\r",
											"\r",
											"    const lastName = [\r",
											"    \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
											"    \"Alves\", \"Ferreira\", \"Costa\", \"Gomes\", \"Martins\",\r",
											"    \"Lima\", \"Garcia\", \"Dias\", \"Mendes\", \"Rocha\",\r",
											"    \"Nunes\", \"Pereira\", \"Carvalho\", \"Sousa\", \"Barbosa\",\r",
											"    \"Coelho\", \"Cruz\", \"Henrique\", \"Freitas\", \"Monteiro\",\r",
											"    \"Araujo\", \"Cardoso\", \"Fonseca\", \"Campos\", \"Melo\",\r",
											"    \"Albuquerque\", \"Andrade\", \"Antunes\", \"Amorim\", \"Azevedo\",\r",
											"    \"Batista\", \"Bernardes\", \"Botelho\", \"Camargo\", \"Carmo\",\r",
											"    \"Carvalho\", \"Castro\", \"Coutinho\", \"Couto\", \"Cunha\",\r",
											"    \"Duarte\", \"Figueiredo\", \"Frota\", \"Furtado\", \"Goncalves\",\r",
											"    \"Lopes\", \"Machado\", \"Marques\", \"Matos\", \"Medeiros\",\r",
											"    \"Moraes\", \"Moreira\", \"Moura\", \"Nascimento\", \"Nogueira\",\r",
											"    \"Oliveira\", \"Pacheco\", \"Paiva\", \"Paula\", \"Pinto\",\r",
											"    \"Pires\", \"Queiroz\", \"Ramos\", \"Reis\", \"Ribeiro\",\r",
											"    \"Sampaio\", \"Santana\", \"Santiago\", \"Santos\", \"Severino\",\r",
											"    \"Siqueira\", \"Soares\", \"Teixeira\", \"Torres\", \"Vasconcelos\",\r",
											"    \"Vieira\", \"Vilela\", \"Xavier\", \"Abreu\", \"Almeida\",\r",
											"    \"Alvares\", \"Aragao\", \"Araujo\", \"Barros\", \"Bastos\",\r",
											"    \"Brito\", \"Cabral\", \"Correia\", \"Correa\", \"Domingues\",\r",
											"    \"Escobar\", \"Esteves\", \"Faria\", \"Fernandes\", \"Ferraz\",\r",
											"    \"Franca\", \"Franco\", \"Guedes\", \"Leal\", \"Leite\",\r",
											"    \"Lopes\", \"Lourenco\", \"Maciel\", \"Magalhaes\", \"Maia\",\r",
											"    \"Marinho\", \"Mattos\", \"Menezes\", \"Miranda\", \"Moraes\",\r",
											"    \"Morais\", \"Mourao\", \"Navarro\", \"Neves\", \"Nobre\",\r",
											"    \"Ochoa\", \"Pessoa\", \"Pinheiro\", \"Porto\", \"Quintela\",\r",
											"    \"Rangel\", \"Rego\", \"Ribeiro\", \"Rocha\", \"Rosario\",\r",
											"    \"Sales\", \"Santoro\", \"Saraiva\", \"Sarmento\", \"Seabra\",\r",
											"    \"Sena\", \"Serra\", \"Serrano\", \"Silveira\", \"Simoes\",\r",
											"    \"Soeiro\", \"Tavares\", \"Teles\", \"Tenorio\", \"Terra\",\r",
											"    \"Valente\", \"Valentim\", \"Vargas\", \"Vasques\", \"Veiga\",\r",
											"    \"Veloso\", \"Viana\", \"Viegas\", \"Vieira\", \"Vila\",\r",
											"    \"Vilas\", \"Villas\", \"Vital\", \"Zamith\", \"Zanetti\"]\r",
											"\r",
											"    const randomLastName = lastName[Math.floor(Math.random() * lastName.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastName\", lastName())\r",
											"\r",
											"pm.environment.set(\"FullNameUserAdmin\", pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
											"\r",
											"function generateProvedor () {\r",
											"    const provedor = [\"@yahoo.com.br\", \"@gmail.com\", \"@hotmail.com\", \"@uol.com\", \"@outlook.com\"]\r",
											"    const randomProvedor = provedor[Math.floor(Math.random() * provedor.length)]\r",
											"    return randomProvedor\r",
											"}\r",
											"pm.environment.set(\"Provedor\", generateProvedor())\r",
											"\r",
											"pm.environment.set(\"MailUserAdmin\", pm.environment.get(\"FullName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")+\"_\"+pm.variables.replaceIn('{{$guid}}' + pm.environment.get(\"Provedor\")))\r",
											"\r",
											"function generatePassword(){\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%*\";\r",
											"    const minLength = 6;\r",
											"    const maxLength = 12;\r",
											"\r",
											"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;\r",
											"    let password = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * chars.length);\r",
											"        password += chars[randomIndex];\r",
											"    }\r",
											"\r",
											"    return password;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"PasswordUserAdmin\", generatePassword())\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.environment.set(\"UserAdminId\", responseData._id)\r",
											"\r",
											"pm.test(\"Status Code is 201\", () => {\r",
											"    pm.response.to.have.status(201)\r",
											"})\r",
											"\r",
											"pm.test(\"Verify message sucess\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgUserCreatedSucess\"))\r",
											"})\r",
											"\r",
											"pm.test(\"Verify id is not empty\", () => {\r",
											"    pm.expect(responseData._id).to.not.be.empty\r",
											"})\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{FullNameUserAdmin}}\",\r\n  \"email\": \"{{MailUserAdmin}}\",\r\n  \"password\": \"{{PasswordUserAdmin}}\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/usuarios",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Realizar login de usuário admin cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.environment.set(\"TokenAdmin\", responseData.authorization)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifiy message login sucess\", function () {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgLoginSucess\"))\r",
											"})\r",
											"\r",
											"pm.test(\"Verify token exists\", function () {\r",
											"    pm.expect(responseData).to.have.property(\"authorization\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{MailUserAdmin}}\",\r\n  \"password\": \"{{PasswordUserAdmin}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tests",
					"item": [
						{
							"name": "CRUD compra com sucesso",
							"item": [
								{
									"name": "Cadastrar produto com usuário admin com sucesso",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function productsFirstName() {\r",
													"    const names = [   \r",
													"    \"Purezza\", \"FreshX\", \"GlowStar\", \"ShinePro\", \"BloomX\",\r",
													"    \"Radiance\", \"PurityPro\", \"EssenceX\", \"Natureza\", \"Harmonia\",\r",
													"    \"Balance\", \"Wellness\", \"Vitality\", \"BeautyPro\", \"CareMax\",\r",
													"    \"BioStar\", \"Organix\", \"FreshPro\", \"GreenX\", \"Naturalis\",\r",
													"    \"MakePro\", \"ColorX\", \"ShadePro\", \"ToneMax\", \"HueStar\",\r",
													"    \"Pigmenta\", \"ChromaX\", \"TintPro\", \"ShinePlus\", \"GlowMax\",\r",
													"    \"BeautyX\", \"FacePro\", \"LookMax\", \"StylePro\", \"ChicStar\",\r",
													"    \"TreatmentPro\", \"CarePlus\", \"HealMax\", \"RepairX\", \"RenewPro\",\r",
													"    \"RestoreStar\", \"RevivePlus\", \"RejuvenX\", \"YouthPro\", \"VitalX\",\r",
													"    \"PurePro\", \"CleanMax\", \"FreshStar\", \"PuriPlus\", \"ClaroX\",\r",
													"    \"ElitePro\", \"LuxStar\", \"PremiumX\", \"SupremePro\", \"UltraMax\",\r",
													"    \"ExclusivePlus\", \"RoyalStar\", \"DiamondX\", \"GoldPro\", \"PlatinumPlus\"\r",
													"    ]\r",
													"\r",
													"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
													"    return randomNames\r",
													"}\r",
													"\r",
													"pm.environment.set(\"ProductFirstName\", productsFirstName())\r",
													"\r",
													"function productsSecondName() {\r",
													"    const names = [   \r",
													"    \"Purezza\", \"FreshX\", \"GlowStar\", \"ShinePro\", \"BloomX\",\r",
													"    \"Radiance\", \"PurityPro\", \"EssenceX\", \"Natureza\", \"Harmonia\",\r",
													"    \"Balance\", \"Wellness\", \"Vitality\", \"BeautyPro\", \"CareMax\",\r",
													"    \"BioStar\", \"Organix\", \"FreshPro\", \"GreenX\", \"Naturalis\",\r",
													"    \"MakePro\", \"ColorX\", \"ShadePro\", \"ToneMax\", \"HueStar\",\r",
													"    \"Pigmenta\", \"ChromaX\", \"TintPro\", \"ShinePlus\", \"GlowMax\",\r",
													"    \"BeautyX\", \"FacePro\", \"LookMax\", \"StylePro\", \"ChicStar\",\r",
													"    \"TreatmentPro\", \"CarePlus\", \"HealMax\", \"RepairX\", \"RenewPro\",\r",
													"    \"RestoreStar\", \"RevivePlus\", \"RejuvenX\", \"YouthPro\", \"VitalX\",\r",
													"    \"PurePro\", \"CleanMax\", \"FreshStar\", \"PuriPlus\", \"ClaroX\",\r",
													"    \"ElitePro\", \"LuxStar\", \"PremiumX\", \"SupremePro\", \"UltraMax\",\r",
													"    \"ExclusivePlus\", \"RoyalStar\", \"DiamondX\", \"GoldPro\", \"PlatinumPlus\"\r",
													"    ]\r",
													"\r",
													"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
													"    return randomNames\r",
													"}\r",
													"\r",
													"const randomNumber = Math.floor(Math.random() * 9000) + 1000\r",
													"\r",
													"pm.environment.set(\"ProductSecondName\", productsSecondName())\r",
													"\r",
													"pm.environment.set(\"Product\", pm.environment.get(\"ProductFirstName\") + \" \" + pm.environment.get(\"ProductSecondName\") + \" \" + randomNumber)\r",
													"\r",
													"function priceProduct() {\r",
													"    return Math.round(Math.random() * (12999.99 - 9.99) + 9.99);\r",
													"}\r",
													"\r",
													"pm.environment.set(\"PriceProduct\", priceProduct())\r",
													"\r",
													"function productDescription() {\r",
													"    const description = [   \"Fórmula inovadora para resultados visíveis e duradouros\",\r",
													"    \"Desenvolvido com ingredientes selecionados para máximo desempenho\",\r",
													"    \"Tecnologia avançada para cuidados pessoais de alta qualidade\",\r",
													"    \"Solução profissional para necessidades específicas de beleza\",\r",
													"    \"Composição especial para resultados excepcionais\",\r",
													"    \"Formulação premium com ingredientes de alta pureza\",\r",
													"    \"Desenvolvimento exclusivo para tratamentos sofisticados\",\r",
													"    \"Tecnologia de ponta para cuidados avançados\",\r",
													"    \"Sistema inovador de tratamento e manutenção\",\r",
													"    \"Fórmula especial para resultados expressivos\",\r",
													"    \"Composição única para máximo benefício\",\r",
													"    \"Tecnologia de última geração para cuidados especiais\",\r",
													"    \"Desenvolvimento exclusivo para resultados superiores\",\r",
													"    \"Solução profissional de alta performance\",\r",
													"    \"Formulação avançada para necessidades específicas\",\r",
													"    \"Tecnologia premium para resultados excepcionais\",\r",
													"    \"Composição especial para cuidados intensivos\",\r",
													"    \"Sistema inovador de tratamento e proteção\",\r",
													"    \"Fórmula exclusiva para resultados duradouros\",\r",
													"    \"Desenvolvimento sofisticado para cuidados avançados\",\r",
													"    \"Tecnologia de ponta para máximo desempenho\",\r",
													"    \"Solução profissional de alta qualidade\",\r",
													"    \"Composição premium para resultados superiores\",\r",
													"    \"Formulação especial para necessidades específicas\",\r",
													"    \"Tecnologia avançada para cuidados especiais\",\r",
													"    \"Sistema inovador para tratamentos exclusivos\",\r",
													"    \"Fórmula única para resultados expressivos\",\r",
													"    \"Desenvolvimento exclusivo para máximo benefício\",\r",
													"    \"Composição de alta qualidade para cuidados especiais\",\r",
													"    \"Tecnologia sofisticada para resultados excepcionais\",\r",
													"    \"Solução premium para necessidades específicas\",\r",
													"    \"Formulação avançada para tratamentos intensivos\",\r",
													"    \"Sistema profissional de alta performance\",\r",
													"    \"Fórmula especial para resultados duradouros\",\r",
													"    \"Desenvolvimento inovador para cuidados avançados\",\r",
													"    \"Tecnologia de última geração para máximo desempenho\",\r",
													"    \"Composição exclusiva para resultados superiores\",\r",
													"    \"Solução sofisticada para necessidades específicas\",\r",
													"    \"Formulação premium para cuidados especiais\",\r",
													"    \"Sistema avançado para tratamentos exclusivos\"]\r",
													"\r",
													"    const randomDescription = description[Math.floor(Math.random() * description.length)]\r",
													"    return randomDescription\r",
													"}\r",
													"\r",
													"pm.environment.set(\"ProductDescription\", productDescription())\r",
													"\r",
													"function generateStock() {\r",
													"    // Gera uma quantidade aleatória entre 1 e 1000\r",
													"    return Math.floor(Math.random() * 1000) + 1;\r",
													"}\r",
													"\r",
													"pm.environment.set(\"ProductQuantity\", generateStock())"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.environment.set(\"ProductId\", responseData._id)\r",
													"\r",
													"pm.test(\"Check Status Code is 201\", () => {\r",
													"    pm.response.to.have.status(201)\r",
													"})\r",
													"\r",
													"pm.test(\"Check message product was successsfully registered\", () => {\r",
													"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgProductSucess\"))\r",
													"})\r",
													"\r",
													"pm.test(\"Check id is not null\", () => {\r",
													"    pm.expect(responseData._id).to.not.be.null\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{{Product}}\",\r\n  \"preco\": {{PriceProduct}},\r\n  \"descricao\": \"{{ProductDescription}}\",\r\n  \"quantidade\": {{ProductQuantity}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseUrl}}/produtos",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"produtos"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cadastrar produto 2 com usuário admin com sucesso",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function productsFirstName() {\r",
													"    const names = [   \r",
													"    \"Purezza\", \"FreshX\", \"GlowStar\", \"ShinePro\", \"BloomX\",\r",
													"    \"Radiance\", \"PurityPro\", \"EssenceX\", \"Natureza\", \"Harmonia\",\r",
													"    \"Balance\", \"Wellness\", \"Vitality\", \"BeautyPro\", \"CareMax\",\r",
													"    \"BioStar\", \"Organix\", \"FreshPro\", \"GreenX\", \"Naturalis\",\r",
													"    \"MakePro\", \"ColorX\", \"ShadePro\", \"ToneMax\", \"HueStar\",\r",
													"    \"Pigmenta\", \"ChromaX\", \"TintPro\", \"ShinePlus\", \"GlowMax\",\r",
													"    \"BeautyX\", \"FacePro\", \"LookMax\", \"StylePro\", \"ChicStar\",\r",
													"    \"TreatmentPro\", \"CarePlus\", \"HealMax\", \"RepairX\", \"RenewPro\",\r",
													"    \"RestoreStar\", \"RevivePlus\", \"RejuvenX\", \"YouthPro\", \"VitalX\",\r",
													"    \"PurePro\", \"CleanMax\", \"FreshStar\", \"PuriPlus\", \"ClaroX\",\r",
													"    \"ElitePro\", \"LuxStar\", \"PremiumX\", \"SupremePro\", \"UltraMax\",\r",
													"    \"ExclusivePlus\", \"RoyalStar\", \"DiamondX\", \"GoldPro\", \"PlatinumPlus\"\r",
													"    ]\r",
													"\r",
													"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
													"    return randomNames\r",
													"}\r",
													"\r",
													"pm.environment.set(\"ProductFirstName\", productsFirstName())\r",
													"\r",
													"function productsSecondName() {\r",
													"    const names = [   \r",
													"    \"Purezza\", \"FreshX\", \"GlowStar\", \"ShinePro\", \"BloomX\",\r",
													"    \"Radiance\", \"PurityPro\", \"EssenceX\", \"Natureza\", \"Harmonia\",\r",
													"    \"Balance\", \"Wellness\", \"Vitality\", \"BeautyPro\", \"CareMax\",\r",
													"    \"BioStar\", \"Organix\", \"FreshPro\", \"GreenX\", \"Naturalis\",\r",
													"    \"MakePro\", \"ColorX\", \"ShadePro\", \"ToneMax\", \"HueStar\",\r",
													"    \"Pigmenta\", \"ChromaX\", \"TintPro\", \"ShinePlus\", \"GlowMax\",\r",
													"    \"BeautyX\", \"FacePro\", \"LookMax\", \"StylePro\", \"ChicStar\",\r",
													"    \"TreatmentPro\", \"CarePlus\", \"HealMax\", \"RepairX\", \"RenewPro\",\r",
													"    \"RestoreStar\", \"RevivePlus\", \"RejuvenX\", \"YouthPro\", \"VitalX\",\r",
													"    \"PurePro\", \"CleanMax\", \"FreshStar\", \"PuriPlus\", \"ClaroX\",\r",
													"    \"ElitePro\", \"LuxStar\", \"PremiumX\", \"SupremePro\", \"UltraMax\",\r",
													"    \"ExclusivePlus\", \"RoyalStar\", \"DiamondX\", \"GoldPro\", \"PlatinumPlus\"\r",
													"    ]\r",
													"\r",
													"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
													"    return randomNames\r",
													"}\r",
													"\r",
													"const randomNumber = Math.floor(Math.random() * 9000) + 1000\r",
													"\r",
													"pm.environment.set(\"ProductSecondName\", productsSecondName())\r",
													"\r",
													"pm.environment.set(\"Product2\", pm.environment.get(\"ProductFirstName\") + \" \" + pm.environment.get(\"ProductSecondName\") + \" \" + randomNumber)\r",
													"\r",
													"function priceProduct() {\r",
													"    return Math.round(Math.random() * (12999.99 - 9.99) + 9.99);\r",
													"}\r",
													"\r",
													"pm.environment.set(\"PriceProduct\", priceProduct())\r",
													"\r",
													"function productDescription() {\r",
													"    const description = [   \"Fórmula inovadora para resultados visíveis e duradouros\",\r",
													"    \"Desenvolvido com ingredientes selecionados para máximo desempenho\",\r",
													"    \"Tecnologia avançada para cuidados pessoais de alta qualidade\",\r",
													"    \"Solução profissional para necessidades específicas de beleza\",\r",
													"    \"Composição especial para resultados excepcionais\",\r",
													"    \"Formulação premium com ingredientes de alta pureza\",\r",
													"    \"Desenvolvimento exclusivo para tratamentos sofisticados\",\r",
													"    \"Tecnologia de ponta para cuidados avançados\",\r",
													"    \"Sistema inovador de tratamento e manutenção\",\r",
													"    \"Fórmula especial para resultados expressivos\",\r",
													"    \"Composição única para máximo benefício\",\r",
													"    \"Tecnologia de última geração para cuidados especiais\",\r",
													"    \"Desenvolvimento exclusivo para resultados superiores\",\r",
													"    \"Solução profissional de alta performance\",\r",
													"    \"Formulação avançada para necessidades específicas\",\r",
													"    \"Tecnologia premium para resultados excepcionais\",\r",
													"    \"Composição especial para cuidados intensivos\",\r",
													"    \"Sistema inovador de tratamento e proteção\",\r",
													"    \"Fórmula exclusiva para resultados duradouros\",\r",
													"    \"Desenvolvimento sofisticado para cuidados avançados\",\r",
													"    \"Tecnologia de ponta para máximo desempenho\",\r",
													"    \"Solução profissional de alta qualidade\",\r",
													"    \"Composição premium para resultados superiores\",\r",
													"    \"Formulação especial para necessidades específicas\",\r",
													"    \"Tecnologia avançada para cuidados especiais\",\r",
													"    \"Sistema inovador para tratamentos exclusivos\",\r",
													"    \"Fórmula única para resultados expressivos\",\r",
													"    \"Desenvolvimento exclusivo para máximo benefício\",\r",
													"    \"Composição de alta qualidade para cuidados especiais\",\r",
													"    \"Tecnologia sofisticada para resultados excepcionais\",\r",
													"    \"Solução premium para necessidades específicas\",\r",
													"    \"Formulação avançada para tratamentos intensivos\",\r",
													"    \"Sistema profissional de alta performance\",\r",
													"    \"Fórmula especial para resultados duradouros\",\r",
													"    \"Desenvolvimento inovador para cuidados avançados\",\r",
													"    \"Tecnologia de última geração para máximo desempenho\",\r",
													"    \"Composição exclusiva para resultados superiores\",\r",
													"    \"Solução sofisticada para necessidades específicas\",\r",
													"    \"Formulação premium para cuidados especiais\",\r",
													"    \"Sistema avançado para tratamentos exclusivos\"]\r",
													"\r",
													"    const randomDescription = description[Math.floor(Math.random() * description.length)]\r",
													"    return randomDescription\r",
													"}\r",
													"\r",
													"pm.environment.set(\"ProductDescription\", productDescription())\r",
													"\r",
													"function generateStock() {\r",
													"    // Gera uma quantidade aleatória entre 1 e 1000\r",
													"    return Math.floor(Math.random() * 1000) + 1;\r",
													"}\r",
													"\r",
													"pm.environment.set(\"ProductQuantity\", generateStock())"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.environment.set(\"ProductId2\", responseData._id)\r",
													"\r",
													"pm.test(\"Check Status Code is 201\", () => {\r",
													"    pm.response.to.have.status(201)\r",
													"})\r",
													"\r",
													"pm.test(\"Check message product was successsfully registered\", () => {\r",
													"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgProductSucess\"))\r",
													"})\r",
													"\r",
													"pm.test(\"Check id is not null\", () => {\r",
													"    pm.expect(responseData._id).to.not.be.null\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{{Product2}}\",\r\n  \"preco\": {{PriceProduct2}},\r\n  \"descricao\": \"{{ProductDescription2}}\",\r\n  \"quantidade\": {{ProductQuantity2}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseUrl}}/produtos",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"produtos"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cadastrar carrinho com sucesso",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateQuantityProductCart() {\r",
													"    // Gera uma quantidade aleatória entre 1 e 20\r",
													"    return Math.floor(Math.random() * 20) + 1;\r",
													"}\r",
													"\r",
													"pm.environment.set(\"QuantityProductCart\", generateQuantityProductCart())"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Check Status Code is 201\", () => {\r",
													"    pm.response.to.have.status(201)\r",
													"})\r",
													"\r",
													"pm.test(\"Check cart created\", () => {\r",
													"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgCartCreated\"))\r",
													"    pm.expect(responseData).to.have.property(\"_id\").and.to.not.be.null\r",
													"    pm.environment.set(\"CartId\", responseData._id)\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{ProductId}}\",\r\n      \"quantidade\": {{QuantityProductCart}}\r\n    },\r\n    {\r\n      \"idProduto\": \"{{ProductId2}}\",\r\n      \"quantidade\": {{QuantityProductCart}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseUrl}}/carrinhos",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"carrinhos"
											]
										}
									},
									"response": []
								},
								{
									"name": "Listar carrinhos com sucesso",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Check Status Code is 200\", () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"pm.test(\"Check cart list have a property end not null\", () => {\r",
													"    pm.expect(responseData.carrinhos[0].produtos[0]).to.have.property(\"idProduto\").and.to.not.be.null\r",
													"\r",
													"    pm.expect(responseData.carrinhos[0].produtos[0]).to.have.property(\"quantidade\").and.to.not.be.null\r",
													"   \r",
													"   pm.expect(responseData.carrinhos[0].produtos[0]).to.have.property(\"precoUnitario\").and.to.not.be.null\r",
													"   \r",
													"   \r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseUrl}}/carrinhos",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"carrinhos"
											]
										}
									},
									"response": []
								},
								{
									"name": "Buscar carrinho por id com sucesso",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Check Status Code is 200\", () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"pm.test(\"Check cart list have a property end not null\", () => {\r",
													"    pm.expect(responseData.produtos[0]).to.have.property(\"idProduto\").and.to.not.be.null\r",
													"\r",
													"    pm.expect(responseData.produtos[0]).to.have.property(\"quantidade\").and.to.not.be.null\r",
													"   \r",
													"   pm.expect(responseData.produtos[0]).to.have.property(\"precoUnitario\").and.to.not.be.null\r",
													"   \r",
													"   \r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseUrl}}/carrinhos/{{CartId}}",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"carrinhos",
												"{{CartId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Excluir carrinho após finalização da compra com sucesso",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Check Status Code is 200\", () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"pm.test(\"Check message cart deleted\", () => {\r",
													"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgCartFinishSucess\"))\r",
													"   \r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BaseUrl}}/carrinhos/concluir-compra",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"carrinhos",
												"concluir-compra"
											]
										}
									},
									"response": []
								},
								{
									"name": "Buscar carrinho por id  após finalizar compra",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Check Status Code is 400\", () => {\r",
													"    pm.response.to.have.status(400)\r",
													"})\r",
													"\r",
													"pm.test(\"Check message cart deleted\", () => {\r",
													"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgCartNotFound\"))\r",
													"   \r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseUrl}}/carrinhos/{{CartId}}",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"carrinhos",
												"{{CartId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CRUD cancelamento da compra",
							"item": [
								{
									"name": "Cadastrar produto com usuário admin com sucesso",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function productsFirstName() {\r",
													"    const names = [   \r",
													"    \"Purezza\", \"FreshX\", \"GlowStar\", \"ShinePro\", \"BloomX\",\r",
													"    \"Radiance\", \"PurityPro\", \"EssenceX\", \"Natureza\", \"Harmonia\",\r",
													"    \"Balance\", \"Wellness\", \"Vitality\", \"BeautyPro\", \"CareMax\",\r",
													"    \"BioStar\", \"Organix\", \"FreshPro\", \"GreenX\", \"Naturalis\",\r",
													"    \"MakePro\", \"ColorX\", \"ShadePro\", \"ToneMax\", \"HueStar\",\r",
													"    \"Pigmenta\", \"ChromaX\", \"TintPro\", \"ShinePlus\", \"GlowMax\",\r",
													"    \"BeautyX\", \"FacePro\", \"LookMax\", \"StylePro\", \"ChicStar\",\r",
													"    \"TreatmentPro\", \"CarePlus\", \"HealMax\", \"RepairX\", \"RenewPro\",\r",
													"    \"RestoreStar\", \"RevivePlus\", \"RejuvenX\", \"YouthPro\", \"VitalX\",\r",
													"    \"PurePro\", \"CleanMax\", \"FreshStar\", \"PuriPlus\", \"ClaroX\",\r",
													"    \"ElitePro\", \"LuxStar\", \"PremiumX\", \"SupremePro\", \"UltraMax\",\r",
													"    \"ExclusivePlus\", \"RoyalStar\", \"DiamondX\", \"GoldPro\", \"PlatinumPlus\"\r",
													"    ]\r",
													"\r",
													"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
													"    return randomNames\r",
													"}\r",
													"\r",
													"pm.environment.set(\"ProductFirstName\", productsFirstName())\r",
													"\r",
													"function productsSecondName() {\r",
													"    const names = [   \r",
													"    \"Purezza\", \"FreshX\", \"GlowStar\", \"ShinePro\", \"BloomX\",\r",
													"    \"Radiance\", \"PurityPro\", \"EssenceX\", \"Natureza\", \"Harmonia\",\r",
													"    \"Balance\", \"Wellness\", \"Vitality\", \"BeautyPro\", \"CareMax\",\r",
													"    \"BioStar\", \"Organix\", \"FreshPro\", \"GreenX\", \"Naturalis\",\r",
													"    \"MakePro\", \"ColorX\", \"ShadePro\", \"ToneMax\", \"HueStar\",\r",
													"    \"Pigmenta\", \"ChromaX\", \"TintPro\", \"ShinePlus\", \"GlowMax\",\r",
													"    \"BeautyX\", \"FacePro\", \"LookMax\", \"StylePro\", \"ChicStar\",\r",
													"    \"TreatmentPro\", \"CarePlus\", \"HealMax\", \"RepairX\", \"RenewPro\",\r",
													"    \"RestoreStar\", \"RevivePlus\", \"RejuvenX\", \"YouthPro\", \"VitalX\",\r",
													"    \"PurePro\", \"CleanMax\", \"FreshStar\", \"PuriPlus\", \"ClaroX\",\r",
													"    \"ElitePro\", \"LuxStar\", \"PremiumX\", \"SupremePro\", \"UltraMax\",\r",
													"    \"ExclusivePlus\", \"RoyalStar\", \"DiamondX\", \"GoldPro\", \"PlatinumPlus\"\r",
													"    ]\r",
													"\r",
													"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
													"    return randomNames\r",
													"}\r",
													"\r",
													"const randomNumber = Math.floor(Math.random() * 9000) + 1000\r",
													"\r",
													"pm.environment.set(\"ProductSecondName\", productsSecondName())\r",
													"\r",
													"pm.environment.set(\"Product\", pm.environment.get(\"ProductFirstName\") + \" \" + pm.environment.get(\"ProductSecondName\") + \" \" + randomNumber)\r",
													"\r",
													"function priceProduct() {\r",
													"    return Math.round(Math.random() * (12999.99 - 9.99) + 9.99);\r",
													"}\r",
													"\r",
													"pm.environment.set(\"PriceProduct\", priceProduct())\r",
													"\r",
													"function productDescription() {\r",
													"    const description = [   \"Fórmula inovadora para resultados visíveis e duradouros\",\r",
													"    \"Desenvolvido com ingredientes selecionados para máximo desempenho\",\r",
													"    \"Tecnologia avançada para cuidados pessoais de alta qualidade\",\r",
													"    \"Solução profissional para necessidades específicas de beleza\",\r",
													"    \"Composição especial para resultados excepcionais\",\r",
													"    \"Formulação premium com ingredientes de alta pureza\",\r",
													"    \"Desenvolvimento exclusivo para tratamentos sofisticados\",\r",
													"    \"Tecnologia de ponta para cuidados avançados\",\r",
													"    \"Sistema inovador de tratamento e manutenção\",\r",
													"    \"Fórmula especial para resultados expressivos\",\r",
													"    \"Composição única para máximo benefício\",\r",
													"    \"Tecnologia de última geração para cuidados especiais\",\r",
													"    \"Desenvolvimento exclusivo para resultados superiores\",\r",
													"    \"Solução profissional de alta performance\",\r",
													"    \"Formulação avançada para necessidades específicas\",\r",
													"    \"Tecnologia premium para resultados excepcionais\",\r",
													"    \"Composição especial para cuidados intensivos\",\r",
													"    \"Sistema inovador de tratamento e proteção\",\r",
													"    \"Fórmula exclusiva para resultados duradouros\",\r",
													"    \"Desenvolvimento sofisticado para cuidados avançados\",\r",
													"    \"Tecnologia de ponta para máximo desempenho\",\r",
													"    \"Solução profissional de alta qualidade\",\r",
													"    \"Composição premium para resultados superiores\",\r",
													"    \"Formulação especial para necessidades específicas\",\r",
													"    \"Tecnologia avançada para cuidados especiais\",\r",
													"    \"Sistema inovador para tratamentos exclusivos\",\r",
													"    \"Fórmula única para resultados expressivos\",\r",
													"    \"Desenvolvimento exclusivo para máximo benefício\",\r",
													"    \"Composição de alta qualidade para cuidados especiais\",\r",
													"    \"Tecnologia sofisticada para resultados excepcionais\",\r",
													"    \"Solução premium para necessidades específicas\",\r",
													"    \"Formulação avançada para tratamentos intensivos\",\r",
													"    \"Sistema profissional de alta performance\",\r",
													"    \"Fórmula especial para resultados duradouros\",\r",
													"    \"Desenvolvimento inovador para cuidados avançados\",\r",
													"    \"Tecnologia de última geração para máximo desempenho\",\r",
													"    \"Composição exclusiva para resultados superiores\",\r",
													"    \"Solução sofisticada para necessidades específicas\",\r",
													"    \"Formulação premium para cuidados especiais\",\r",
													"    \"Sistema avançado para tratamentos exclusivos\"]\r",
													"\r",
													"    const randomDescription = description[Math.floor(Math.random() * description.length)]\r",
													"    return randomDescription\r",
													"}\r",
													"\r",
													"pm.environment.set(\"ProductDescription\", productDescription())\r",
													"\r",
													"function generateStock() {\r",
													"    // Gera uma quantidade aleatória entre 1 e 1000\r",
													"    return Math.floor(Math.random() * 1000) + 1;\r",
													"}\r",
													"\r",
													"pm.environment.set(\"ProductQuantity\", generateStock())"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.environment.set(\"ProductId\", responseData._id)\r",
													"\r",
													"pm.test(\"Check Status Code is 201\", () => {\r",
													"    pm.response.to.have.status(201)\r",
													"})\r",
													"\r",
													"pm.test(\"Check message product was successsfully registered\", () => {\r",
													"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgProductSucess\"))\r",
													"})\r",
													"\r",
													"pm.test(\"Check id is not null\", () => {\r",
													"    pm.expect(responseData._id).to.not.be.null\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{{Product}}\",\r\n  \"preco\": {{PriceProduct}},\r\n  \"descricao\": \"{{ProductDescription}}\",\r\n  \"quantidade\": {{ProductQuantity}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseUrl}}/produtos",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"produtos"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cadastrar produto 2 com usuário admin com sucesso",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function productsFirstName() {\r",
													"    const names = [   \r",
													"    \"Purezza\", \"FreshX\", \"GlowStar\", \"ShinePro\", \"BloomX\",\r",
													"    \"Radiance\", \"PurityPro\", \"EssenceX\", \"Natureza\", \"Harmonia\",\r",
													"    \"Balance\", \"Wellness\", \"Vitality\", \"BeautyPro\", \"CareMax\",\r",
													"    \"BioStar\", \"Organix\", \"FreshPro\", \"GreenX\", \"Naturalis\",\r",
													"    \"MakePro\", \"ColorX\", \"ShadePro\", \"ToneMax\", \"HueStar\",\r",
													"    \"Pigmenta\", \"ChromaX\", \"TintPro\", \"ShinePlus\", \"GlowMax\",\r",
													"    \"BeautyX\", \"FacePro\", \"LookMax\", \"StylePro\", \"ChicStar\",\r",
													"    \"TreatmentPro\", \"CarePlus\", \"HealMax\", \"RepairX\", \"RenewPro\",\r",
													"    \"RestoreStar\", \"RevivePlus\", \"RejuvenX\", \"YouthPro\", \"VitalX\",\r",
													"    \"PurePro\", \"CleanMax\", \"FreshStar\", \"PuriPlus\", \"ClaroX\",\r",
													"    \"ElitePro\", \"LuxStar\", \"PremiumX\", \"SupremePro\", \"UltraMax\",\r",
													"    \"ExclusivePlus\", \"RoyalStar\", \"DiamondX\", \"GoldPro\", \"PlatinumPlus\"\r",
													"    ]\r",
													"\r",
													"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
													"    return randomNames\r",
													"}\r",
													"\r",
													"pm.environment.set(\"ProductFirstName\", productsFirstName())\r",
													"\r",
													"function productsSecondName() {\r",
													"    const names = [   \r",
													"    \"Purezza\", \"FreshX\", \"GlowStar\", \"ShinePro\", \"BloomX\",\r",
													"    \"Radiance\", \"PurityPro\", \"EssenceX\", \"Natureza\", \"Harmonia\",\r",
													"    \"Balance\", \"Wellness\", \"Vitality\", \"BeautyPro\", \"CareMax\",\r",
													"    \"BioStar\", \"Organix\", \"FreshPro\", \"GreenX\", \"Naturalis\",\r",
													"    \"MakePro\", \"ColorX\", \"ShadePro\", \"ToneMax\", \"HueStar\",\r",
													"    \"Pigmenta\", \"ChromaX\", \"TintPro\", \"ShinePlus\", \"GlowMax\",\r",
													"    \"BeautyX\", \"FacePro\", \"LookMax\", \"StylePro\", \"ChicStar\",\r",
													"    \"TreatmentPro\", \"CarePlus\", \"HealMax\", \"RepairX\", \"RenewPro\",\r",
													"    \"RestoreStar\", \"RevivePlus\", \"RejuvenX\", \"YouthPro\", \"VitalX\",\r",
													"    \"PurePro\", \"CleanMax\", \"FreshStar\", \"PuriPlus\", \"ClaroX\",\r",
													"    \"ElitePro\", \"LuxStar\", \"PremiumX\", \"SupremePro\", \"UltraMax\",\r",
													"    \"ExclusivePlus\", \"RoyalStar\", \"DiamondX\", \"GoldPro\", \"PlatinumPlus\"\r",
													"    ]\r",
													"\r",
													"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
													"    return randomNames\r",
													"}\r",
													"\r",
													"const randomNumber = Math.floor(Math.random() * 9000) + 1000\r",
													"\r",
													"pm.environment.set(\"ProductSecondName\", productsSecondName())\r",
													"\r",
													"pm.environment.set(\"Product2\", pm.environment.get(\"ProductFirstName\") + \" \" + pm.environment.get(\"ProductSecondName\") + \" \" + randomNumber)\r",
													"\r",
													"function priceProduct() {\r",
													"    return Math.round(Math.random() * (12999.99 - 9.99) + 9.99);\r",
													"}\r",
													"\r",
													"pm.environment.set(\"PriceProduct\", priceProduct())\r",
													"\r",
													"function productDescription() {\r",
													"    const description = [   \"Fórmula inovadora para resultados visíveis e duradouros\",\r",
													"    \"Desenvolvido com ingredientes selecionados para máximo desempenho\",\r",
													"    \"Tecnologia avançada para cuidados pessoais de alta qualidade\",\r",
													"    \"Solução profissional para necessidades específicas de beleza\",\r",
													"    \"Composição especial para resultados excepcionais\",\r",
													"    \"Formulação premium com ingredientes de alta pureza\",\r",
													"    \"Desenvolvimento exclusivo para tratamentos sofisticados\",\r",
													"    \"Tecnologia de ponta para cuidados avançados\",\r",
													"    \"Sistema inovador de tratamento e manutenção\",\r",
													"    \"Fórmula especial para resultados expressivos\",\r",
													"    \"Composição única para máximo benefício\",\r",
													"    \"Tecnologia de última geração para cuidados especiais\",\r",
													"    \"Desenvolvimento exclusivo para resultados superiores\",\r",
													"    \"Solução profissional de alta performance\",\r",
													"    \"Formulação avançada para necessidades específicas\",\r",
													"    \"Tecnologia premium para resultados excepcionais\",\r",
													"    \"Composição especial para cuidados intensivos\",\r",
													"    \"Sistema inovador de tratamento e proteção\",\r",
													"    \"Fórmula exclusiva para resultados duradouros\",\r",
													"    \"Desenvolvimento sofisticado para cuidados avançados\",\r",
													"    \"Tecnologia de ponta para máximo desempenho\",\r",
													"    \"Solução profissional de alta qualidade\",\r",
													"    \"Composição premium para resultados superiores\",\r",
													"    \"Formulação especial para necessidades específicas\",\r",
													"    \"Tecnologia avançada para cuidados especiais\",\r",
													"    \"Sistema inovador para tratamentos exclusivos\",\r",
													"    \"Fórmula única para resultados expressivos\",\r",
													"    \"Desenvolvimento exclusivo para máximo benefício\",\r",
													"    \"Composição de alta qualidade para cuidados especiais\",\r",
													"    \"Tecnologia sofisticada para resultados excepcionais\",\r",
													"    \"Solução premium para necessidades específicas\",\r",
													"    \"Formulação avançada para tratamentos intensivos\",\r",
													"    \"Sistema profissional de alta performance\",\r",
													"    \"Fórmula especial para resultados duradouros\",\r",
													"    \"Desenvolvimento inovador para cuidados avançados\",\r",
													"    \"Tecnologia de última geração para máximo desempenho\",\r",
													"    \"Composição exclusiva para resultados superiores\",\r",
													"    \"Solução sofisticada para necessidades específicas\",\r",
													"    \"Formulação premium para cuidados especiais\",\r",
													"    \"Sistema avançado para tratamentos exclusivos\"]\r",
													"\r",
													"    const randomDescription = description[Math.floor(Math.random() * description.length)]\r",
													"    return randomDescription\r",
													"}\r",
													"\r",
													"pm.environment.set(\"ProductDescription\", productDescription())\r",
													"\r",
													"function generateStock() {\r",
													"    // Gera uma quantidade aleatória entre 1 e 1000\r",
													"    return Math.floor(Math.random() * 1000) + 1;\r",
													"}\r",
													"\r",
													"pm.environment.set(\"ProductQuantity\", generateStock())"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.environment.set(\"ProductId2\", responseData._id)\r",
													"\r",
													"pm.test(\"Check Status Code is 201\", () => {\r",
													"    pm.response.to.have.status(201)\r",
													"})\r",
													"\r",
													"pm.test(\"Check message product was successsfully registered\", () => {\r",
													"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgProductSucess\"))\r",
													"})\r",
													"\r",
													"pm.test(\"Check id is not null\", () => {\r",
													"    pm.expect(responseData._id).to.not.be.null\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{{Product2}}\",\r\n  \"preco\": {{PriceProduct2}},\r\n  \"descricao\": \"{{ProductDescription2}}\",\r\n  \"quantidade\": {{ProductQuantity2}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseUrl}}/produtos",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"produtos"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cadastrar carrinho com sucesso",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateQuantityProductCart() {\r",
													"    // Gera uma quantidade aleatória entre 1 e 20\r",
													"    return Math.floor(Math.random() * 20) + 1;\r",
													"}\r",
													"\r",
													"pm.environment.set(\"QuantityProductCart\", generateQuantityProductCart())"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Check Status Code is 201\", () => {\r",
													"    pm.response.to.have.status(201)\r",
													"})\r",
													"\r",
													"pm.test(\"Check cart created\", () => {\r",
													"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgCartCreated\"))\r",
													"    pm.expect(responseData).to.have.property(\"_id\").and.to.not.be.null\r",
													"    pm.environment.set(\"CartId\", responseData._id)\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{ProductId}}\",\r\n      \"quantidade\": {{QuantityProductCart}}\r\n    },\r\n    {\r\n      \"idProduto\": \"{{ProductId2}}\",\r\n      \"quantidade\": {{QuantityProductCart}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseUrl}}/carrinhos",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"carrinhos"
											]
										}
									},
									"response": []
								},
								{
									"name": "Buscar carrinho por id com sucesso",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Check Status Code is 200\", () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"pm.test(\"Check cart list have a property end not null\", () => {\r",
													"    pm.expect(responseData.produtos[0]).to.have.property(\"idProduto\").and.to.not.be.null\r",
													"\r",
													"    pm.expect(responseData.produtos[0]).to.have.property(\"quantidade\").and.to.not.be.null\r",
													"   \r",
													"   pm.expect(responseData.produtos[0]).to.have.property(\"precoUnitario\").and.to.not.be.null\r",
													"   \r",
													"   \r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseUrl}}/carrinhos/{{CartId}}",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"carrinhos",
												"{{CartId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Excluir carrinho após cancelamento da compra com sucesso",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Check Status Code is 200\", () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"pm.test(\"Check message cart deleted\", () => {\r",
													"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgCartCancelSucess\"))\r",
													"   \r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BaseUrl}}/carrinhos/cancelar-compra",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"carrinhos",
												"cancelar-compra"
											]
										}
									},
									"response": []
								},
								{
									"name": "Buscar carrinho por id  após cancelar compra",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Check Status Code is 400\", () => {\r",
													"    pm.response.to.have.status(400)\r",
													"})\r",
													"\r",
													"pm.test(\"Check message cart deleted\", () => {\r",
													"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgCartNotFound\"))\r",
													"   \r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseUrl}}/carrinhos/{{CartId}}",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"carrinhos",
												"{{CartId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Exceptions",
					"item": [
						{
							"name": "Cadastrar carrinho com produto inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message error add cart\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgProductNotFound\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n     {\r\n      \"idProduto\": \"{{InvalidProductId}}\",\r\n      \"quantidade\": 3\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/carrinhos",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinho sem informar o token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 401\", () => {\r",
											"    pm.response.to.have.status(401)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message error add cart\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgErrorToken\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateQuantityProductCart() {\r",
											"    // Gera uma quantidade aleatória entre 1 e 20\r",
											"    return Math.floor(Math.random() * 20) + 1;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"QuantityProductCart\", generateQuantityProductCart())"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{ProductId}}\",\r\n      \"quantidade\": {{QuantityProductCart}}\r\n    },\r\n    {\r\n      \"idProduto\": \"{{ProductId2}}\",\r\n      \"quantidade\": {{QuantityProductCart}}\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/carrinhos",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar carrinhos  com preço total inválido como query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message error add cart\", () => {\r",
											"    pm.expect(responseData.precoTotal).to.eql(pm.globals.get(\"MsgInvalidTotalPrice\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/carrinhos?precoTotal={{InvalidTotalPrice}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"carrinhos"
									],
									"query": [
										{
											"key": "precoTotal",
											"value": "{{InvalidTotalPrice}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar carrinhos com quantidade total  inválida como query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message error add cart\", () => {\r",
											"    pm.expect(responseData.quantidadeTotal).to.eql(pm.globals.get(\"MsgInvalidTotalQuantity\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/carrinhos?quantidadeTotal={{InvalidTotalQuantity}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"carrinhos"
									],
									"query": [
										{
											"key": "quantidadeTotal",
											"value": "{{InvalidTotalQuantity}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir carrinho após finalização da compra -  sem informar o token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 401\", () => {\r",
											"    pm.response.to.have.status(401)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message error add cart\", () => {\r",
											"    pm.expect(responseData.quantidadeTotal).to.eql(pm.globals.get(\"MsgTokenError\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/carrinhos/concluir-compra",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"carrinhos",
										"concluir-compra"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir carrinho após cancelamento da compra -  sem informar o token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 401\", () => {\r",
											"    pm.response.to.have.status(401)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message error add cart\", () => {\r",
											"    pm.expect(responseData.quantidadeTotal).to.eql(pm.globals.get(\"MsgTokenError\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/carrinhos/cancelar-compra",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"carrinhos",
										"cancelar-compra"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Exception - Cart Duplicate",
					"item": [
						{
							"name": "Cadastrar produto com usuário admin com sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function productsFirstName() {\r",
											"    const names = [   \r",
											"    \"Purezza\", \"FreshX\", \"GlowStar\", \"ShinePro\", \"BloomX\",\r",
											"    \"Radiance\", \"PurityPro\", \"EssenceX\", \"Natureza\", \"Harmonia\",\r",
											"    \"Balance\", \"Wellness\", \"Vitality\", \"BeautyPro\", \"CareMax\",\r",
											"    \"BioStar\", \"Organix\", \"FreshPro\", \"GreenX\", \"Naturalis\",\r",
											"    \"MakePro\", \"ColorX\", \"ShadePro\", \"ToneMax\", \"HueStar\",\r",
											"    \"Pigmenta\", \"ChromaX\", \"TintPro\", \"ShinePlus\", \"GlowMax\",\r",
											"    \"BeautyX\", \"FacePro\", \"LookMax\", \"StylePro\", \"ChicStar\",\r",
											"    \"TreatmentPro\", \"CarePlus\", \"HealMax\", \"RepairX\", \"RenewPro\",\r",
											"    \"RestoreStar\", \"RevivePlus\", \"RejuvenX\", \"YouthPro\", \"VitalX\",\r",
											"    \"PurePro\", \"CleanMax\", \"FreshStar\", \"PuriPlus\", \"ClaroX\",\r",
											"    \"ElitePro\", \"LuxStar\", \"PremiumX\", \"SupremePro\", \"UltraMax\",\r",
											"    \"ExclusivePlus\", \"RoyalStar\", \"DiamondX\", \"GoldPro\", \"PlatinumPlus\"\r",
											"    ]\r",
											"\r",
											"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomNames\r",
											"}\r",
											"\r",
											"pm.environment.set(\"ProductFirstName\", productsFirstName())\r",
											"\r",
											"function productsSecondName() {\r",
											"    const names = [   \r",
											"    \"Purezza\", \"FreshX\", \"GlowStar\", \"ShinePro\", \"BloomX\",\r",
											"    \"Radiance\", \"PurityPro\", \"EssenceX\", \"Natureza\", \"Harmonia\",\r",
											"    \"Balance\", \"Wellness\", \"Vitality\", \"BeautyPro\", \"CareMax\",\r",
											"    \"BioStar\", \"Organix\", \"FreshPro\", \"GreenX\", \"Naturalis\",\r",
											"    \"MakePro\", \"ColorX\", \"ShadePro\", \"ToneMax\", \"HueStar\",\r",
											"    \"Pigmenta\", \"ChromaX\", \"TintPro\", \"ShinePlus\", \"GlowMax\",\r",
											"    \"BeautyX\", \"FacePro\", \"LookMax\", \"StylePro\", \"ChicStar\",\r",
											"    \"TreatmentPro\", \"CarePlus\", \"HealMax\", \"RepairX\", \"RenewPro\",\r",
											"    \"RestoreStar\", \"RevivePlus\", \"RejuvenX\", \"YouthPro\", \"VitalX\",\r",
											"    \"PurePro\", \"CleanMax\", \"FreshStar\", \"PuriPlus\", \"ClaroX\",\r",
											"    \"ElitePro\", \"LuxStar\", \"PremiumX\", \"SupremePro\", \"UltraMax\",\r",
											"    \"ExclusivePlus\", \"RoyalStar\", \"DiamondX\", \"GoldPro\", \"PlatinumPlus\"\r",
											"    ]\r",
											"\r",
											"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomNames\r",
											"}\r",
											"\r",
											"const randomNumber = Math.floor(Math.random() * 9000) + 1000\r",
											"\r",
											"pm.environment.set(\"ProductSecondName\", productsSecondName())\r",
											"\r",
											"pm.environment.set(\"Product\", pm.environment.get(\"ProductFirstName\") + \" \" + pm.environment.get(\"ProductSecondName\") + \" \" + randomNumber)\r",
											"\r",
											"function priceProduct() {\r",
											"    return Math.round(Math.random() * (12999.99 - 9.99) + 9.99);\r",
											"}\r",
											"\r",
											"pm.environment.set(\"PriceProduct\", priceProduct())\r",
											"\r",
											"function productDescription() {\r",
											"    const description = [   \"Fórmula inovadora para resultados visíveis e duradouros\",\r",
											"    \"Desenvolvido com ingredientes selecionados para máximo desempenho\",\r",
											"    \"Tecnologia avançada para cuidados pessoais de alta qualidade\",\r",
											"    \"Solução profissional para necessidades específicas de beleza\",\r",
											"    \"Composição especial para resultados excepcionais\",\r",
											"    \"Formulação premium com ingredientes de alta pureza\",\r",
											"    \"Desenvolvimento exclusivo para tratamentos sofisticados\",\r",
											"    \"Tecnologia de ponta para cuidados avançados\",\r",
											"    \"Sistema inovador de tratamento e manutenção\",\r",
											"    \"Fórmula especial para resultados expressivos\",\r",
											"    \"Composição única para máximo benefício\",\r",
											"    \"Tecnologia de última geração para cuidados especiais\",\r",
											"    \"Desenvolvimento exclusivo para resultados superiores\",\r",
											"    \"Solução profissional de alta performance\",\r",
											"    \"Formulação avançada para necessidades específicas\",\r",
											"    \"Tecnologia premium para resultados excepcionais\",\r",
											"    \"Composição especial para cuidados intensivos\",\r",
											"    \"Sistema inovador de tratamento e proteção\",\r",
											"    \"Fórmula exclusiva para resultados duradouros\",\r",
											"    \"Desenvolvimento sofisticado para cuidados avançados\",\r",
											"    \"Tecnologia de ponta para máximo desempenho\",\r",
											"    \"Solução profissional de alta qualidade\",\r",
											"    \"Composição premium para resultados superiores\",\r",
											"    \"Formulação especial para necessidades específicas\",\r",
											"    \"Tecnologia avançada para cuidados especiais\",\r",
											"    \"Sistema inovador para tratamentos exclusivos\",\r",
											"    \"Fórmula única para resultados expressivos\",\r",
											"    \"Desenvolvimento exclusivo para máximo benefício\",\r",
											"    \"Composição de alta qualidade para cuidados especiais\",\r",
											"    \"Tecnologia sofisticada para resultados excepcionais\",\r",
											"    \"Solução premium para necessidades específicas\",\r",
											"    \"Formulação avançada para tratamentos intensivos\",\r",
											"    \"Sistema profissional de alta performance\",\r",
											"    \"Fórmula especial para resultados duradouros\",\r",
											"    \"Desenvolvimento inovador para cuidados avançados\",\r",
											"    \"Tecnologia de última geração para máximo desempenho\",\r",
											"    \"Composição exclusiva para resultados superiores\",\r",
											"    \"Solução sofisticada para necessidades específicas\",\r",
											"    \"Formulação premium para cuidados especiais\",\r",
											"    \"Sistema avançado para tratamentos exclusivos\"]\r",
											"\r",
											"    const randomDescription = description[Math.floor(Math.random() * description.length)]\r",
											"    return randomDescription\r",
											"}\r",
											"\r",
											"pm.environment.set(\"ProductDescription\", productDescription())\r",
											"\r",
											"function generateStock() {\r",
											"    // Gera uma quantidade aleatória entre 1 e 1000\r",
											"    return Math.floor(Math.random() * 1000) + 1;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"ProductQuantity\", generateStock())"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.environment.set(\"ProductId\", responseData._id)\r",
											"\r",
											"pm.test(\"Check Status Code is 201\", () => {\r",
											"    pm.response.to.have.status(201)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message product was successsfully registered\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgProductSucess\"))\r",
											"})\r",
											"\r",
											"pm.test(\"Check id is not null\", () => {\r",
											"    pm.expect(responseData._id).to.not.be.null\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{Product}}\",\r\n  \"preco\": {{PriceProduct}},\r\n  \"descricao\": \"{{ProductDescription}}\",\r\n  \"quantidade\": {{ProductQuantity}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/produtos",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar produto 2 com usuário admin com sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function productsFirstName() {\r",
											"    const names = [   \r",
											"    \"Purezza\", \"FreshX\", \"GlowStar\", \"ShinePro\", \"BloomX\",\r",
											"    \"Radiance\", \"PurityPro\", \"EssenceX\", \"Natureza\", \"Harmonia\",\r",
											"    \"Balance\", \"Wellness\", \"Vitality\", \"BeautyPro\", \"CareMax\",\r",
											"    \"BioStar\", \"Organix\", \"FreshPro\", \"GreenX\", \"Naturalis\",\r",
											"    \"MakePro\", \"ColorX\", \"ShadePro\", \"ToneMax\", \"HueStar\",\r",
											"    \"Pigmenta\", \"ChromaX\", \"TintPro\", \"ShinePlus\", \"GlowMax\",\r",
											"    \"BeautyX\", \"FacePro\", \"LookMax\", \"StylePro\", \"ChicStar\",\r",
											"    \"TreatmentPro\", \"CarePlus\", \"HealMax\", \"RepairX\", \"RenewPro\",\r",
											"    \"RestoreStar\", \"RevivePlus\", \"RejuvenX\", \"YouthPro\", \"VitalX\",\r",
											"    \"PurePro\", \"CleanMax\", \"FreshStar\", \"PuriPlus\", \"ClaroX\",\r",
											"    \"ElitePro\", \"LuxStar\", \"PremiumX\", \"SupremePro\", \"UltraMax\",\r",
											"    \"ExclusivePlus\", \"RoyalStar\", \"DiamondX\", \"GoldPro\", \"PlatinumPlus\"\r",
											"    ]\r",
											"\r",
											"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomNames\r",
											"}\r",
											"\r",
											"pm.environment.set(\"ProductFirstName\", productsFirstName())\r",
											"\r",
											"function productsSecondName() {\r",
											"    const names = [   \r",
											"    \"Purezza\", \"FreshX\", \"GlowStar\", \"ShinePro\", \"BloomX\",\r",
											"    \"Radiance\", \"PurityPro\", \"EssenceX\", \"Natureza\", \"Harmonia\",\r",
											"    \"Balance\", \"Wellness\", \"Vitality\", \"BeautyPro\", \"CareMax\",\r",
											"    \"BioStar\", \"Organix\", \"FreshPro\", \"GreenX\", \"Naturalis\",\r",
											"    \"MakePro\", \"ColorX\", \"ShadePro\", \"ToneMax\", \"HueStar\",\r",
											"    \"Pigmenta\", \"ChromaX\", \"TintPro\", \"ShinePlus\", \"GlowMax\",\r",
											"    \"BeautyX\", \"FacePro\", \"LookMax\", \"StylePro\", \"ChicStar\",\r",
											"    \"TreatmentPro\", \"CarePlus\", \"HealMax\", \"RepairX\", \"RenewPro\",\r",
											"    \"RestoreStar\", \"RevivePlus\", \"RejuvenX\", \"YouthPro\", \"VitalX\",\r",
											"    \"PurePro\", \"CleanMax\", \"FreshStar\", \"PuriPlus\", \"ClaroX\",\r",
											"    \"ElitePro\", \"LuxStar\", \"PremiumX\", \"SupremePro\", \"UltraMax\",\r",
											"    \"ExclusivePlus\", \"RoyalStar\", \"DiamondX\", \"GoldPro\", \"PlatinumPlus\"\r",
											"    ]\r",
											"\r",
											"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomNames\r",
											"}\r",
											"\r",
											"const randomNumber = Math.floor(Math.random() * 9000) + 1000\r",
											"\r",
											"pm.environment.set(\"ProductSecondName\", productsSecondName())\r",
											"\r",
											"pm.environment.set(\"Product2\", pm.environment.get(\"ProductFirstName\") + \" \" + pm.environment.get(\"ProductSecondName\") + \" \" + randomNumber)\r",
											"\r",
											"function priceProduct() {\r",
											"    return Math.round(Math.random() * (12999.99 - 9.99) + 9.99);\r",
											"}\r",
											"\r",
											"pm.environment.set(\"PriceProduct\", priceProduct())\r",
											"\r",
											"function productDescription() {\r",
											"    const description = [   \"Fórmula inovadora para resultados visíveis e duradouros\",\r",
											"    \"Desenvolvido com ingredientes selecionados para máximo desempenho\",\r",
											"    \"Tecnologia avançada para cuidados pessoais de alta qualidade\",\r",
											"    \"Solução profissional para necessidades específicas de beleza\",\r",
											"    \"Composição especial para resultados excepcionais\",\r",
											"    \"Formulação premium com ingredientes de alta pureza\",\r",
											"    \"Desenvolvimento exclusivo para tratamentos sofisticados\",\r",
											"    \"Tecnologia de ponta para cuidados avançados\",\r",
											"    \"Sistema inovador de tratamento e manutenção\",\r",
											"    \"Fórmula especial para resultados expressivos\",\r",
											"    \"Composição única para máximo benefício\",\r",
											"    \"Tecnologia de última geração para cuidados especiais\",\r",
											"    \"Desenvolvimento exclusivo para resultados superiores\",\r",
											"    \"Solução profissional de alta performance\",\r",
											"    \"Formulação avançada para necessidades específicas\",\r",
											"    \"Tecnologia premium para resultados excepcionais\",\r",
											"    \"Composição especial para cuidados intensivos\",\r",
											"    \"Sistema inovador de tratamento e proteção\",\r",
											"    \"Fórmula exclusiva para resultados duradouros\",\r",
											"    \"Desenvolvimento sofisticado para cuidados avançados\",\r",
											"    \"Tecnologia de ponta para máximo desempenho\",\r",
											"    \"Solução profissional de alta qualidade\",\r",
											"    \"Composição premium para resultados superiores\",\r",
											"    \"Formulação especial para necessidades específicas\",\r",
											"    \"Tecnologia avançada para cuidados especiais\",\r",
											"    \"Sistema inovador para tratamentos exclusivos\",\r",
											"    \"Fórmula única para resultados expressivos\",\r",
											"    \"Desenvolvimento exclusivo para máximo benefício\",\r",
											"    \"Composição de alta qualidade para cuidados especiais\",\r",
											"    \"Tecnologia sofisticada para resultados excepcionais\",\r",
											"    \"Solução premium para necessidades específicas\",\r",
											"    \"Formulação avançada para tratamentos intensivos\",\r",
											"    \"Sistema profissional de alta performance\",\r",
											"    \"Fórmula especial para resultados duradouros\",\r",
											"    \"Desenvolvimento inovador para cuidados avançados\",\r",
											"    \"Tecnologia de última geração para máximo desempenho\",\r",
											"    \"Composição exclusiva para resultados superiores\",\r",
											"    \"Solução sofisticada para necessidades específicas\",\r",
											"    \"Formulação premium para cuidados especiais\",\r",
											"    \"Sistema avançado para tratamentos exclusivos\"]\r",
											"\r",
											"    const randomDescription = description[Math.floor(Math.random() * description.length)]\r",
											"    return randomDescription\r",
											"}\r",
											"\r",
											"pm.environment.set(\"ProductDescription\", productDescription())\r",
											"\r",
											"function generateStock() {\r",
											"    // Gera uma quantidade aleatória entre 1 e 1000\r",
											"    return Math.floor(Math.random() * 1000) + 1;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"ProductQuantity\", generateStock())"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.environment.set(\"ProductId2\", responseData._id)\r",
											"\r",
											"pm.test(\"Check Status Code is 201\", () => {\r",
											"    pm.response.to.have.status(201)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message product was successsfully registered\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgProductSucess\"))\r",
											"})\r",
											"\r",
											"pm.test(\"Check id is not null\", () => {\r",
											"    pm.expect(responseData._id).to.not.be.null\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{Product2}}\",\r\n  \"preco\": {{PriceProduct2}},\r\n  \"descricao\": \"{{ProductDescription2}}\",\r\n  \"quantidade\": {{ProductQuantity2}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/produtos",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinho com sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateQuantityProductCart() {\r",
											"    // Gera uma quantidade aleatória entre 1 e 20\r",
											"    return Math.floor(Math.random() * 20) + 1;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"QuantityProductCart\", generateQuantityProductCart())"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 201\", () => {\r",
											"    pm.response.to.have.status(201)\r",
											"})\r",
											"\r",
											"pm.test(\"Check cart created\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgCartCreated\"))\r",
											"    pm.expect(responseData).to.have.property(\"_id\").and.to.not.be.null\r",
											"    pm.environment.set(\"CartId\", responseData._id)\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{ProductId}}\",\r\n      \"quantidade\": {{QuantityProductCart}}\r\n    },\r\n    {\r\n      \"idProduto\": \"{{ProductId2}}\",\r\n      \"quantidade\": {{QuantityProductCart}}\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/carrinhos",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinho em duplicidade",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateQuantityProductCart() {\r",
											"    // Gera uma quantidade aleatória entre 1 e 20\r",
											"    return Math.floor(Math.random() * 20) + 1;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"QuantityProductCart\", generateQuantityProductCart())"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message error add cart\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgCartDuplicated\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{ProductId}}\",\r\n      \"quantidade\": {{QuantityProductCart}}\r\n    },\r\n    {\r\n      \"idProduto\": \"{{ProductId2}}\",\r\n      \"quantidade\": {{QuantityProductCart}}\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/carrinhos",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir carrinho após finalização da compra com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 200\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message cart deleted\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgCartFinishSucess\"))\r",
											"   \r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/carrinhos/concluir-compra",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"carrinhos",
										"concluir-compra"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Exception - Excluir produto que está em um carrinho",
					"item": [
						{
							"name": "Cadastrar produto com usuário admin com sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function productsFirstName() {\r",
											"    const names = [   \r",
											"    \"Purezza\", \"FreshX\", \"GlowStar\", \"ShinePro\", \"BloomX\",\r",
											"    \"Radiance\", \"PurityPro\", \"EssenceX\", \"Natureza\", \"Harmonia\",\r",
											"    \"Balance\", \"Wellness\", \"Vitality\", \"BeautyPro\", \"CareMax\",\r",
											"    \"BioStar\", \"Organix\", \"FreshPro\", \"GreenX\", \"Naturalis\",\r",
											"    \"MakePro\", \"ColorX\", \"ShadePro\", \"ToneMax\", \"HueStar\",\r",
											"    \"Pigmenta\", \"ChromaX\", \"TintPro\", \"ShinePlus\", \"GlowMax\",\r",
											"    \"BeautyX\", \"FacePro\", \"LookMax\", \"StylePro\", \"ChicStar\",\r",
											"    \"TreatmentPro\", \"CarePlus\", \"HealMax\", \"RepairX\", \"RenewPro\",\r",
											"    \"RestoreStar\", \"RevivePlus\", \"RejuvenX\", \"YouthPro\", \"VitalX\",\r",
											"    \"PurePro\", \"CleanMax\", \"FreshStar\", \"PuriPlus\", \"ClaroX\",\r",
											"    \"ElitePro\", \"LuxStar\", \"PremiumX\", \"SupremePro\", \"UltraMax\",\r",
											"    \"ExclusivePlus\", \"RoyalStar\", \"DiamondX\", \"GoldPro\", \"PlatinumPlus\"\r",
											"    ]\r",
											"\r",
											"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomNames\r",
											"}\r",
											"\r",
											"pm.environment.set(\"ProductFirstName\", productsFirstName())\r",
											"\r",
											"function productsSecondName() {\r",
											"    const names = [   \r",
											"    \"Purezza\", \"FreshX\", \"GlowStar\", \"ShinePro\", \"BloomX\",\r",
											"    \"Radiance\", \"PurityPro\", \"EssenceX\", \"Natureza\", \"Harmonia\",\r",
											"    \"Balance\", \"Wellness\", \"Vitality\", \"BeautyPro\", \"CareMax\",\r",
											"    \"BioStar\", \"Organix\", \"FreshPro\", \"GreenX\", \"Naturalis\",\r",
											"    \"MakePro\", \"ColorX\", \"ShadePro\", \"ToneMax\", \"HueStar\",\r",
											"    \"Pigmenta\", \"ChromaX\", \"TintPro\", \"ShinePlus\", \"GlowMax\",\r",
											"    \"BeautyX\", \"FacePro\", \"LookMax\", \"StylePro\", \"ChicStar\",\r",
											"    \"TreatmentPro\", \"CarePlus\", \"HealMax\", \"RepairX\", \"RenewPro\",\r",
											"    \"RestoreStar\", \"RevivePlus\", \"RejuvenX\", \"YouthPro\", \"VitalX\",\r",
											"    \"PurePro\", \"CleanMax\", \"FreshStar\", \"PuriPlus\", \"ClaroX\",\r",
											"    \"ElitePro\", \"LuxStar\", \"PremiumX\", \"SupremePro\", \"UltraMax\",\r",
											"    \"ExclusivePlus\", \"RoyalStar\", \"DiamondX\", \"GoldPro\", \"PlatinumPlus\"\r",
											"    ]\r",
											"\r",
											"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomNames\r",
											"}\r",
											"\r",
											"const randomNumber = Math.floor(Math.random() * 9000) + 1000\r",
											"\r",
											"pm.environment.set(\"ProductSecondName\", productsSecondName())\r",
											"\r",
											"pm.environment.set(\"Product\", pm.environment.get(\"ProductFirstName\") + \" \" + pm.environment.get(\"ProductSecondName\") + \" \" + randomNumber)\r",
											"\r",
											"function priceProduct() {\r",
											"    return Math.round(Math.random() * (12999.99 - 9.99) + 9.99);\r",
											"}\r",
											"\r",
											"pm.environment.set(\"PriceProduct\", priceProduct())\r",
											"\r",
											"function productDescription() {\r",
											"    const description = [   \"Fórmula inovadora para resultados visíveis e duradouros\",\r",
											"    \"Desenvolvido com ingredientes selecionados para máximo desempenho\",\r",
											"    \"Tecnologia avançada para cuidados pessoais de alta qualidade\",\r",
											"    \"Solução profissional para necessidades específicas de beleza\",\r",
											"    \"Composição especial para resultados excepcionais\",\r",
											"    \"Formulação premium com ingredientes de alta pureza\",\r",
											"    \"Desenvolvimento exclusivo para tratamentos sofisticados\",\r",
											"    \"Tecnologia de ponta para cuidados avançados\",\r",
											"    \"Sistema inovador de tratamento e manutenção\",\r",
											"    \"Fórmula especial para resultados expressivos\",\r",
											"    \"Composição única para máximo benefício\",\r",
											"    \"Tecnologia de última geração para cuidados especiais\",\r",
											"    \"Desenvolvimento exclusivo para resultados superiores\",\r",
											"    \"Solução profissional de alta performance\",\r",
											"    \"Formulação avançada para necessidades específicas\",\r",
											"    \"Tecnologia premium para resultados excepcionais\",\r",
											"    \"Composição especial para cuidados intensivos\",\r",
											"    \"Sistema inovador de tratamento e proteção\",\r",
											"    \"Fórmula exclusiva para resultados duradouros\",\r",
											"    \"Desenvolvimento sofisticado para cuidados avançados\",\r",
											"    \"Tecnologia de ponta para máximo desempenho\",\r",
											"    \"Solução profissional de alta qualidade\",\r",
											"    \"Composição premium para resultados superiores\",\r",
											"    \"Formulação especial para necessidades específicas\",\r",
											"    \"Tecnologia avançada para cuidados especiais\",\r",
											"    \"Sistema inovador para tratamentos exclusivos\",\r",
											"    \"Fórmula única para resultados expressivos\",\r",
											"    \"Desenvolvimento exclusivo para máximo benefício\",\r",
											"    \"Composição de alta qualidade para cuidados especiais\",\r",
											"    \"Tecnologia sofisticada para resultados excepcionais\",\r",
											"    \"Solução premium para necessidades específicas\",\r",
											"    \"Formulação avançada para tratamentos intensivos\",\r",
											"    \"Sistema profissional de alta performance\",\r",
											"    \"Fórmula especial para resultados duradouros\",\r",
											"    \"Desenvolvimento inovador para cuidados avançados\",\r",
											"    \"Tecnologia de última geração para máximo desempenho\",\r",
											"    \"Composição exclusiva para resultados superiores\",\r",
											"    \"Solução sofisticada para necessidades específicas\",\r",
											"    \"Formulação premium para cuidados especiais\",\r",
											"    \"Sistema avançado para tratamentos exclusivos\"]\r",
											"\r",
											"    const randomDescription = description[Math.floor(Math.random() * description.length)]\r",
											"    return randomDescription\r",
											"}\r",
											"\r",
											"pm.environment.set(\"ProductDescription\", productDescription())\r",
											"\r",
											"function generateStock() {\r",
											"    // Gera uma quantidade aleatória entre 1 e 1000\r",
											"    return Math.floor(Math.random() * 1000) + 1;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"ProductQuantity\", generateStock())"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.environment.set(\"ProductId\", responseData._id)\r",
											"\r",
											"pm.test(\"Check Status Code is 201\", () => {\r",
											"    pm.response.to.have.status(201)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message product was successsfully registered\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgProductSucess\"))\r",
											"})\r",
											"\r",
											"pm.test(\"Check id is not null\", () => {\r",
											"    pm.expect(responseData._id).to.not.be.null\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{Product}}\",\r\n  \"preco\": {{PriceProduct}},\r\n  \"descricao\": \"{{ProductDescription}}\",\r\n  \"quantidade\": {{ProductQuantity}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/produtos",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinho com sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateQuantityProductCart() {\r",
											"    // Gera uma quantidade aleatória entre 1 e 20\r",
											"    return Math.floor(Math.random() * 20) + 1;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"QuantityProductCart\", generateQuantityProductCart())"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{ProductId}}\",\r\n      \"quantidade\": {{QuantityProductCart}}\r\n    },\r\n    {\r\n      \"idProduto\": \"{{ProductId2}}\",\r\n      \"quantidade\": {{QuantityProductCart}}\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/carrinhos",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir produto com usuário admin com o produto fazendo parte de um carrinho",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message product in cart\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgDeletedProductCart\"))\r",
											"    })"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/produtos/{{ProductId}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"produtos",
										"{{ProductId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir carrinho após finalização da compra com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 200\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message cart deleted\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgCartFinishSucess\"))\r",
											"   \r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/carrinhos/concluir-compra",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"carrinhos",
										"concluir-compra"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Exception - Excluir um usuário com um carrinho cadastrado",
					"item": [
						{
							"name": "Cadastrar produto com usuário admin com sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function productsFirstName() {\r",
											"    const names = [   \r",
											"    \"Purezza\", \"FreshX\", \"GlowStar\", \"ShinePro\", \"BloomX\",\r",
											"    \"Radiance\", \"PurityPro\", \"EssenceX\", \"Natureza\", \"Harmonia\",\r",
											"    \"Balance\", \"Wellness\", \"Vitality\", \"BeautyPro\", \"CareMax\",\r",
											"    \"BioStar\", \"Organix\", \"FreshPro\", \"GreenX\", \"Naturalis\",\r",
											"    \"MakePro\", \"ColorX\", \"ShadePro\", \"ToneMax\", \"HueStar\",\r",
											"    \"Pigmenta\", \"ChromaX\", \"TintPro\", \"ShinePlus\", \"GlowMax\",\r",
											"    \"BeautyX\", \"FacePro\", \"LookMax\", \"StylePro\", \"ChicStar\",\r",
											"    \"TreatmentPro\", \"CarePlus\", \"HealMax\", \"RepairX\", \"RenewPro\",\r",
											"    \"RestoreStar\", \"RevivePlus\", \"RejuvenX\", \"YouthPro\", \"VitalX\",\r",
											"    \"PurePro\", \"CleanMax\", \"FreshStar\", \"PuriPlus\", \"ClaroX\",\r",
											"    \"ElitePro\", \"LuxStar\", \"PremiumX\", \"SupremePro\", \"UltraMax\",\r",
											"    \"ExclusivePlus\", \"RoyalStar\", \"DiamondX\", \"GoldPro\", \"PlatinumPlus\"\r",
											"    ]\r",
											"\r",
											"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomNames\r",
											"}\r",
											"\r",
											"pm.environment.set(\"ProductFirstName\", productsFirstName())\r",
											"\r",
											"function productsSecondName() {\r",
											"    const names = [   \r",
											"    \"Purezza\", \"FreshX\", \"GlowStar\", \"ShinePro\", \"BloomX\",\r",
											"    \"Radiance\", \"PurityPro\", \"EssenceX\", \"Natureza\", \"Harmonia\",\r",
											"    \"Balance\", \"Wellness\", \"Vitality\", \"BeautyPro\", \"CareMax\",\r",
											"    \"BioStar\", \"Organix\", \"FreshPro\", \"GreenX\", \"Naturalis\",\r",
											"    \"MakePro\", \"ColorX\", \"ShadePro\", \"ToneMax\", \"HueStar\",\r",
											"    \"Pigmenta\", \"ChromaX\", \"TintPro\", \"ShinePlus\", \"GlowMax\",\r",
											"    \"BeautyX\", \"FacePro\", \"LookMax\", \"StylePro\", \"ChicStar\",\r",
											"    \"TreatmentPro\", \"CarePlus\", \"HealMax\", \"RepairX\", \"RenewPro\",\r",
											"    \"RestoreStar\", \"RevivePlus\", \"RejuvenX\", \"YouthPro\", \"VitalX\",\r",
											"    \"PurePro\", \"CleanMax\", \"FreshStar\", \"PuriPlus\", \"ClaroX\",\r",
											"    \"ElitePro\", \"LuxStar\", \"PremiumX\", \"SupremePro\", \"UltraMax\",\r",
											"    \"ExclusivePlus\", \"RoyalStar\", \"DiamondX\", \"GoldPro\", \"PlatinumPlus\"\r",
											"    ]\r",
											"\r",
											"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomNames\r",
											"}\r",
											"\r",
											"const randomNumber = Math.floor(Math.random() * 9000) + 1000\r",
											"\r",
											"pm.environment.set(\"ProductSecondName\", productsSecondName())\r",
											"\r",
											"pm.environment.set(\"Product\", pm.environment.get(\"ProductFirstName\") + \" \" + pm.environment.get(\"ProductSecondName\") + \" \" + randomNumber)\r",
											"\r",
											"function priceProduct() {\r",
											"    return Math.round(Math.random() * (12999.99 - 9.99) + 9.99);\r",
											"}\r",
											"\r",
											"pm.environment.set(\"PriceProduct\", priceProduct())\r",
											"\r",
											"function productDescription() {\r",
											"    const description = [   \"Fórmula inovadora para resultados visíveis e duradouros\",\r",
											"    \"Desenvolvido com ingredientes selecionados para máximo desempenho\",\r",
											"    \"Tecnologia avançada para cuidados pessoais de alta qualidade\",\r",
											"    \"Solução profissional para necessidades específicas de beleza\",\r",
											"    \"Composição especial para resultados excepcionais\",\r",
											"    \"Formulação premium com ingredientes de alta pureza\",\r",
											"    \"Desenvolvimento exclusivo para tratamentos sofisticados\",\r",
											"    \"Tecnologia de ponta para cuidados avançados\",\r",
											"    \"Sistema inovador de tratamento e manutenção\",\r",
											"    \"Fórmula especial para resultados expressivos\",\r",
											"    \"Composição única para máximo benefício\",\r",
											"    \"Tecnologia de última geração para cuidados especiais\",\r",
											"    \"Desenvolvimento exclusivo para resultados superiores\",\r",
											"    \"Solução profissional de alta performance\",\r",
											"    \"Formulação avançada para necessidades específicas\",\r",
											"    \"Tecnologia premium para resultados excepcionais\",\r",
											"    \"Composição especial para cuidados intensivos\",\r",
											"    \"Sistema inovador de tratamento e proteção\",\r",
											"    \"Fórmula exclusiva para resultados duradouros\",\r",
											"    \"Desenvolvimento sofisticado para cuidados avançados\",\r",
											"    \"Tecnologia de ponta para máximo desempenho\",\r",
											"    \"Solução profissional de alta qualidade\",\r",
											"    \"Composição premium para resultados superiores\",\r",
											"    \"Formulação especial para necessidades específicas\",\r",
											"    \"Tecnologia avançada para cuidados especiais\",\r",
											"    \"Sistema inovador para tratamentos exclusivos\",\r",
											"    \"Fórmula única para resultados expressivos\",\r",
											"    \"Desenvolvimento exclusivo para máximo benefício\",\r",
											"    \"Composição de alta qualidade para cuidados especiais\",\r",
											"    \"Tecnologia sofisticada para resultados excepcionais\",\r",
											"    \"Solução premium para necessidades específicas\",\r",
											"    \"Formulação avançada para tratamentos intensivos\",\r",
											"    \"Sistema profissional de alta performance\",\r",
											"    \"Fórmula especial para resultados duradouros\",\r",
											"    \"Desenvolvimento inovador para cuidados avançados\",\r",
											"    \"Tecnologia de última geração para máximo desempenho\",\r",
											"    \"Composição exclusiva para resultados superiores\",\r",
											"    \"Solução sofisticada para necessidades específicas\",\r",
											"    \"Formulação premium para cuidados especiais\",\r",
											"    \"Sistema avançado para tratamentos exclusivos\"]\r",
											"\r",
											"    const randomDescription = description[Math.floor(Math.random() * description.length)]\r",
											"    return randomDescription\r",
											"}\r",
											"\r",
											"pm.environment.set(\"ProductDescription\", productDescription())\r",
											"\r",
											"function generateStock() {\r",
											"    // Gera uma quantidade aleatória entre 1 e 1000\r",
											"    return Math.floor(Math.random() * 1000) + 1;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"ProductQuantity\", generateStock())"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.environment.set(\"ProductId\", responseData._id)\r",
											"\r",
											"pm.test(\"Check Status Code is 201\", () => {\r",
											"    pm.response.to.have.status(201)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message product was successsfully registered\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgProductSucess\"))\r",
											"})\r",
											"\r",
											"pm.test(\"Check id is not null\", () => {\r",
											"    pm.expect(responseData._id).to.not.be.null\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{Product}}\",\r\n  \"preco\": {{PriceProduct}},\r\n  \"descricao\": \"{{ProductDescription}}\",\r\n  \"quantidade\": {{ProductQuantity}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/produtos",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinho com sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateQuantityProductCart() {\r",
											"    // Gera uma quantidade aleatória entre 1 e 20\r",
											"    return Math.floor(Math.random() * 20) + 1;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"QuantityProductCart\", generateQuantityProductCart())"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{ProductId}}\",\r\n      \"quantidade\": {{QuantityProductCart}}\r\n    },\r\n    {\r\n      \"idProduto\": \"{{ProductId2}}\",\r\n      \"quantidade\": {{QuantityProductCart}}\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/carrinhos",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir usuário por id possuindo um carrinho cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message error delete\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgDeleteError\"))\r",
											"})\r",
											"\r",
											"pm.test(\"Check cart id is not empty\", () => {\r",
											"    pm.expect(responseData.idCarrinho).to.not.be.empty\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/usuarios/{{UserAdminId}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"usuarios",
										"{{UserAdminId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir carrinho após finalização da compra com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 200\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message cart deleted\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgCartFinishSucess\"))\r",
											"   \r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/carrinhos/concluir-compra",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"carrinhos",
										"concluir-compra"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Teardwon",
					"item": [
						{
							"name": "Excluir produto com usuário admin com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 200\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message deleted sucess\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgProductDeletedSucess\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/produtos/{{ProductId}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"produtos",
										"{{ProductId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir produto 2 com usuário admin com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 200\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message deleted sucess\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgProductDeletedSucess\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/produtos/{{ProductId2}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"produtos",
										"{{ProductId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir usuário admin por id com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 200\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test(\"Verify message user deleted sucess\", () => {\r",
											"    pm.expect(responseData.message).to.eql(pm.globals.get(\"MsgUserDeletedSucess\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/usuarios/{{UserAdminId}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"usuarios",
										"{{UserAdminId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Consulta de carrinhos cadastrados, cadastro de carrinho, conclusão e cancelamento de compras.\n\nTest Setup - dependências necessárias para realização dos testes.\n\nTests - testes de sucesso e falha relacionados ao endpoint de produtos.\n\nTest Teardown - exclusão das dependências necessárias para realizar os testes",
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "key",
						"value": "Authorization",
						"type": "string"
					},
					{
						"key": "value",
						"value": "{{TokenAdmin}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}