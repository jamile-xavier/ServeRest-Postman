{
	"info": {
		"_postman_id": "0658c59c-8480-4eb2-a255-06574c11c643",
		"name": "ServeRest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23226959",
		"_collection_link": "https://speeding-rocket-167088.postman.co/workspace/ServeRest~61298d08-4803-4103-b295-34dc60e43cee/collection/23226959-0658c59c-8480-4eb2-a255-06574c11c643?action=share&source=collection_link&creator=23226959"
	},
	"item": [
		{
			"name": "Sign In",
			"item": [
				{
					"name": "Sucess",
					"item": [
						{
							"name": "Login - sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const data = pm.response.json()\r",
											"\r",
											"pm.environment.set(\"Token\", data.authorization)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifiy message login sucess\", function () {\r",
											"    pm.expect(data.message).to.eql(pm.globals.get(\"MsgLoginSucess\"))\r",
											"})\r",
											"\r",
											"pm.test(\"Verify token exists\", function () {\r",
											"    pm.expect(data).to.have.property(\"authorization\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{EmailModel}}\",\r\n  \"password\": \"{{PasswordModel}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Exceptions",
					"item": [
						{
							"name": "Login - e-mail inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const data = pm.response.json()\r",
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify message error\", function () {\r",
											"    pm.expect(data.message).to.eql(pm.globals.get(\"MsgWrongEmailPassword\"))\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{EmailInvalid}}\",\r\n  \"password\": \"{{PasswordModel}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - senha inválida",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const data = pm.response.json()\r",
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify message error\", function () {\r",
											"    pm.expect(data.message).to.eql(pm.globals.get(\"MsgWrongEmailPassword\"))\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{EmailModel}}\",\r\n  \"password\": \"{{PasswordInvalid}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - e-mail e senha inválidos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const data = pm.response.json()\r",
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify message error\", function () {\r",
											"    pm.expect(data.message).to.eql(pm.globals.get(\"MsgWrongEmailPassword\"))\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{EmailInvalid}}\",\r\n  \"password\": \"{{PasswordInvalid}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - e-mail em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const data = pm.response.json()\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify message error\", function () {\r",
											"    pm.expect(data.email).to.eql(pm.globals.get(\"MsgEmailEmpty\"))\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"\",\r\n  \"password\": \"{{PasswordModel}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - senha em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const data = pm.response.json()\r",
											"\r",
											"pm.test(\"Status Code is 400\", function (){\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test(\"Verify message error\", function() {\r",
											"    pm.expect(data.password).to.eql(pm.globals.get(\"MsgPasswordEmpty\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{EmailModel}}\",\r\n  \"password\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - e-mail e senha em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const data = pm.response.json()\r",
											"\r",
											"pm.test(\"Status Code is 400\", function () {\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test(\"Verify messages error\", function() {\r",
											"    pm.expect(data.email).to.eql(pm.globals.get(\"MsgEmailEmpty\"))\r",
											"    pm.expect(data.password).to.eql(pm.globals.get(\"MsgPasswordEmpty\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"\",\r\n  \"password\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Dependences",
					"item": [
						{
							"name": "Login - sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const data = pm.response.json()\r",
											"\r",
											"pm.environment.set(\"Token\", data.authorization)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifiy message login sucess\", function () {\r",
											"    pm.expect(data.message).to.eql(pm.globals.get(\"MsgLoginSucess\"))\r",
											"})\r",
											"\r",
											"pm.test(\"Verify token exists\", function () {\r",
											"    pm.expect(data).to.have.property(\"authorization\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{EmailModel}}\",\r\n  \"password\": \"{{PasswordModel}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar produto - sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function productsName() {\r",
											"    const names = [   \r",
											"    \"Purezza\", \"FreshX\", \"GlowStar\", \"ShinePro\", \"BloomX\",\r",
											"    \"Radiance\", \"PurityPro\", \"EssenceX\", \"Natureza\", \"Harmonia\",\r",
											"    \"Balance\", \"Wellness\", \"Vitality\", \"BeautyPro\", \"CareMax\",\r",
											"    \"BioStar\", \"Organix\", \"FreshPro\", \"GreenX\", \"Naturalis\",\r",
											"    \"MakePro\", \"ColorX\", \"ShadePro\", \"ToneMax\", \"HueStar\",\r",
											"    \"Pigmenta\", \"ChromaX\", \"TintPro\", \"ShinePlus\", \"GlowMax\",\r",
											"    \"BeautyX\", \"FacePro\", \"LookMax\", \"StylePro\", \"ChicStar\",\r",
											"    \"TreatmentPro\", \"CarePlus\", \"HealMax\", \"RepairX\", \"RenewPro\",\r",
											"    \"RestoreStar\", \"RevivePlus\", \"RejuvenX\", \"YouthPro\", \"VitalX\",\r",
											"    \"PurePro\", \"CleanMax\", \"FreshStar\", \"PuriPlus\", \"ClaroX\",\r",
											"    \"ElitePro\", \"LuxStar\", \"PremiumX\", \"SupremePro\", \"UltraMax\",\r",
											"    \"ExclusivePlus\", \"RoyalStar\", \"DiamondX\", \"GoldPro\", \"PlatinumPlus\"\r",
											"    ]\r",
											"\r",
											"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomNames\r",
											"}\r",
											"\r",
											"pm.environment.set(\"Product\", productsName())\r",
											"\r",
											"function priceProduct() {\r",
											"    return Math.round(Math.random() * (12999.99 - 9.99) + 9.99);\r",
											"}\r",
											"\r",
											"pm.environment.set(\"PriceProduct\", priceProduct())\r",
											"\r",
											"function productDescription() {\r",
											"    const description = [   \"Fórmula inovadora para resultados visíveis e duradouros\",\r",
											"    \"Desenvolvido com ingredientes selecionados para máximo desempenho\",\r",
											"    \"Tecnologia avançada para cuidados pessoais de alta qualidade\",\r",
											"    \"Solução profissional para necessidades específicas de beleza\",\r",
											"    \"Composição especial para resultados excepcionais\",\r",
											"    \"Formulação premium com ingredientes de alta pureza\",\r",
											"    \"Desenvolvimento exclusivo para tratamentos sofisticados\",\r",
											"    \"Tecnologia de ponta para cuidados avançados\",\r",
											"    \"Sistema inovador de tratamento e manutenção\",\r",
											"    \"Fórmula especial para resultados expressivos\",\r",
											"    \"Composição única para máximo benefício\",\r",
											"    \"Tecnologia de última geração para cuidados especiais\",\r",
											"    \"Desenvolvimento exclusivo para resultados superiores\",\r",
											"    \"Solução profissional de alta performance\",\r",
											"    \"Formulação avançada para necessidades específicas\",\r",
											"    \"Tecnologia premium para resultados excepcionais\",\r",
											"    \"Composição especial para cuidados intensivos\",\r",
											"    \"Sistema inovador de tratamento e proteção\",\r",
											"    \"Fórmula exclusiva para resultados duradouros\",\r",
											"    \"Desenvolvimento sofisticado para cuidados avançados\",\r",
											"    \"Tecnologia de ponta para máximo desempenho\",\r",
											"    \"Solução profissional de alta qualidade\",\r",
											"    \"Composição premium para resultados superiores\",\r",
											"    \"Formulação especial para necessidades específicas\",\r",
											"    \"Tecnologia avançada para cuidados especiais\",\r",
											"    \"Sistema inovador para tratamentos exclusivos\",\r",
											"    \"Fórmula única para resultados expressivos\",\r",
											"    \"Desenvolvimento exclusivo para máximo benefício\",\r",
											"    \"Composição de alta qualidade para cuidados especiais\",\r",
											"    \"Tecnologia sofisticada para resultados excepcionais\",\r",
											"    \"Solução premium para necessidades específicas\",\r",
											"    \"Formulação avançada para tratamentos intensivos\",\r",
											"    \"Sistema profissional de alta performance\",\r",
											"    \"Fórmula especial para resultados duradouros\",\r",
											"    \"Desenvolvimento inovador para cuidados avançados\",\r",
											"    \"Tecnologia de última geração para máximo desempenho\",\r",
											"    \"Composição exclusiva para resultados superiores\",\r",
											"    \"Solução sofisticada para necessidades específicas\",\r",
											"    \"Formulação premium para cuidados especiais\",\r",
											"    \"Sistema avançado para tratamentos exclusivos\"]\r",
											"\r",
											"    const randomDescription = description[Math.floor(Math.random() * description.length)]\r",
											"    return randomDescription\r",
											"}\r",
											"\r",
											"pm.environment.set(\"ProductDescription\", productDescription())\r",
											"\r",
											"function generateStock() {\r",
											"    // Gera uma quantidade aleatória entre 1 e 1000\r",
											"    return Math.floor(Math.random() * 1000) + 1;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"ProductQuantity\", generateStock())"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const data = pm.response.json()\r",
											"\r",
											"pm.environment.set(\"ProductId\", data._id)\r",
											"\r",
											"pm.test(\"Check Status Code is 201\", () => {\r",
											"    pm.response.to.have.status(201)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message product was successsfully registered\", () => {\r",
											"    pm.expect(data.message).to.eql(pm.globals.get(\"MsgProductSucess\"))\r",
											"})\r",
											"\r",
											"pm.test(\"Check id is not null\", () => {\r",
											"    pm.expect(data._id).to.not.be.null\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{Product}}\",\r\n  \"preco\": {{PriceProduct}},\r\n  \"descricao\": \"{{ProductDescription}}\",\r\n  \"quantidade\": {{ProductQuantity}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/produtos",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar produto 2 - sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function productsName() {\r",
											"    const names = [   \r",
											"    \"Purezza\", \"FreshX\", \"GlowStar\", \"ShinePro\", \"BloomX\",\r",
											"    \"Radiance\", \"PurityPro\", \"EssenceX\", \"Natureza\", \"Harmonia\",\r",
											"    \"Balance\", \"Wellness\", \"Vitality\", \"BeautyPro\", \"CareMax\",\r",
											"    \"BioStar\", \"Organix\", \"FreshPro\", \"GreenX\", \"Naturalis\",\r",
											"    \"MakePro\", \"ColorX\", \"ShadePro\", \"ToneMax\", \"HueStar\",\r",
											"    \"Pigmenta\", \"ChromaX\", \"TintPro\", \"ShinePlus\", \"GlowMax\",\r",
											"    \"BeautyX\", \"FacePro\", \"LookMax\", \"StylePro\", \"ChicStar\",\r",
											"    \"TreatmentPro\", \"CarePlus\", \"HealMax\", \"RepairX\", \"RenewPro\",\r",
											"    \"RestoreStar\", \"RevivePlus\", \"RejuvenX\", \"YouthPro\", \"VitalX\",\r",
											"    \"PurePro\", \"CleanMax\", \"FreshStar\", \"PuriPlus\", \"ClaroX\",\r",
											"    \"ElitePro\", \"LuxStar\", \"PremiumX\", \"SupremePro\", \"UltraMax\",\r",
											"    \"ExclusivePlus\", \"RoyalStar\", \"DiamondX\", \"GoldPro\", \"PlatinumPlus\"\r",
											"    ]\r",
											"\r",
											"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomNames\r",
											"}\r",
											"\r",
											"pm.environment.set(\"Product2\", productsName())\r",
											"\r",
											"function priceProduct() {\r",
											"    return Math.round(Math.random() * (12999.99 - 9.99) + 9.99);\r",
											"}\r",
											"\r",
											"pm.environment.set(\"PriceProduct2\", priceProduct())\r",
											"\r",
											"function productDescription() {\r",
											"    const description = [   \"Fórmula inovadora para resultados visíveis e duradouros\",\r",
											"    \"Desenvolvido com ingredientes selecionados para máximo desempenho\",\r",
											"    \"Tecnologia avançada para cuidados pessoais de alta qualidade\",\r",
											"    \"Solução profissional para necessidades específicas de beleza\",\r",
											"    \"Composição especial para resultados excepcionais\",\r",
											"    \"Formulação premium com ingredientes de alta pureza\",\r",
											"    \"Desenvolvimento exclusivo para tratamentos sofisticados\",\r",
											"    \"Tecnologia de ponta para cuidados avançados\",\r",
											"    \"Sistema inovador de tratamento e manutenção\",\r",
											"    \"Fórmula especial para resultados expressivos\",\r",
											"    \"Composição única para máximo benefício\",\r",
											"    \"Tecnologia de última geração para cuidados especiais\",\r",
											"    \"Desenvolvimento exclusivo para resultados superiores\",\r",
											"    \"Solução profissional de alta performance\",\r",
											"    \"Formulação avançada para necessidades específicas\",\r",
											"    \"Tecnologia premium para resultados excepcionais\",\r",
											"    \"Composição especial para cuidados intensivos\",\r",
											"    \"Sistema inovador de tratamento e proteção\",\r",
											"    \"Fórmula exclusiva para resultados duradouros\",\r",
											"    \"Desenvolvimento sofisticado para cuidados avançados\",\r",
											"    \"Tecnologia de ponta para máximo desempenho\",\r",
											"    \"Solução profissional de alta qualidade\",\r",
											"    \"Composição premium para resultados superiores\",\r",
											"    \"Formulação especial para necessidades específicas\",\r",
											"    \"Tecnologia avançada para cuidados especiais\",\r",
											"    \"Sistema inovador para tratamentos exclusivos\",\r",
											"    \"Fórmula única para resultados expressivos\",\r",
											"    \"Desenvolvimento exclusivo para máximo benefício\",\r",
											"    \"Composição de alta qualidade para cuidados especiais\",\r",
											"    \"Tecnologia sofisticada para resultados excepcionais\",\r",
											"    \"Solução premium para necessidades específicas\",\r",
											"    \"Formulação avançada para tratamentos intensivos\",\r",
											"    \"Sistema profissional de alta performance\",\r",
											"    \"Fórmula especial para resultados duradouros\",\r",
											"    \"Desenvolvimento inovador para cuidados avançados\",\r",
											"    \"Tecnologia de última geração para máximo desempenho\",\r",
											"    \"Composição exclusiva para resultados superiores\",\r",
											"    \"Solução sofisticada para necessidades específicas\",\r",
											"    \"Formulação premium para cuidados especiais\",\r",
											"    \"Sistema avançado para tratamentos exclusivos\"]\r",
											"\r",
											"    const randomDescription = description[Math.floor(Math.random() * description.length)]\r",
											"    return randomDescription\r",
											"}\r",
											"\r",
											"pm.environment.set(\"ProductDescription2\", productDescription())\r",
											"\r",
											"function generateStock() {\r",
											"    // Gera uma quantidade aleatória entre 1 e 1000\r",
											"    return Math.floor(Math.random() * 1000) + 1;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"ProductQuantity2\", generateStock())"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const data = pm.response.json()\r",
											"\r",
											"pm.environment.set(\"ProductId2\", data._id)\r",
											"\r",
											"pm.test(\"Check Status Code is 201\", () => {\r",
											"    pm.response.to.have.status(201)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message product was successsfully registered\", () => {\r",
											"    pm.expect(data.message).to.eql(pm.globals.get(\"MsgProductSucess\"))\r",
											"})\r",
											"\r",
											"pm.test(\"Check id is not null\", () => {\r",
											"    pm.expect(data._id).to.not.be.null\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{Product2}}\",\r\n  \"preco\": {{PriceProduct2}},\r\n  \"descricao\": \"{{ProductDescription2}}\",\r\n  \"quantidade\": {{ProductQuantity2}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/produtos",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinho - sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateQuantityProductCart() {\r",
											"    // Gera uma quantidade aleatória entre 1 e 20\r",
											"    return Math.floor(Math.random() * 20) + 1;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"QuantityProductCart\", generateQuantityProductCart())"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{ProductId}}\",\r\n      \"quantidade\": {{QuantityProductCart}}\r\n    },\r\n    {\r\n      \"idProduto\": \"{{ProductId2}}\",\r\n      \"quantidade\": {{QuantityProductCart}}\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/carrinhos",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Sucess",
					"item": [
						{
							"name": "Cadastrar usuário - sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstName() {\r",
											"    const names = [\"Ana\", \"Maria\", \"Joana\", \"Luiza\", \"Beatriz\",\r",
											"    \"Gabriela\", \"Julia\", \"Luisa\", \"Carolina\", \"Isabel\",\r",
											"    \"Eduarda\", \"Alice\", \"Laura\", \"Marcela\", \"Rafaela\",\r",
											"    \"Clarice\", \"Helena\", \"Daniela\", \"Adriana\", \"Patricia\",\r",
											"    \"Vanessa\", \"Camila\", \"Fernanda\", \"Priscila\", \"Raquel\",\r",
											"    \"Simone\", \"Andrea\", \"Luciana\", \"Elaine\", \"Monica\",\r",
											"    \"Silvia\", \"Regina\", \"Claudia\", \"Gisele\", \"Bruna\",\r",
											"    \"Thais\", \"Yasmin\", \"Nathalia\", \"Sabrina\", \"Vivian\",\r",
											"    \"Geovana\", \"Francisca\", \"Rosangela\", \"Elizabete\", \"Janaina\",\r",
											"    \"Marcia\", \"Sandra\", \"Eliane\", \"Denise\", \"Luciene\",\"Pedro\", \"Lucas\", \"Gabriel\",\"Matheus\", \"Guilherme\",  \"Felipe\", \"Bernardo\", \"Rafael\", \"Vinicius\", \"Henrique\",\r",
											"    \"Leonardo\", \"Enzo\", \"Benjamin\", \"Nicolas\", \"Pietro\",\r",
											"    \"Murilo\", \"Arthur\", \"Heitor\", \"Bryan\", \"Caio\",\r",
											"    \"Tiago\", \"Rodrigo\", \"Daniel\", \"Bruno\", \"Victor\",\r",
											"    \"Alexandre\", \"Paulo\", \"Carlos\", \"Anderson\", \"William\",\r",
											"    \"Diego\", \"Eduardo\", \"Marcelo\", \"Renan\", \"Leandro\",\r",
											"    \"Douglas\", \"Thiago\", \"Joao\", \"Felippe\", \"Augusto\",\r",
											"    \"Otavio\", \"Francisco\", \"Antonio\", \"Juliano\", \"Marco\",\r",
											"    \"Mario\", \"Roberto\", \"Ricardo\", \"Andre\", \"Fabio\"]\r",
											"\r",
											"    const randomNames = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomNames\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstName\", firstName())\r",
											"\r",
											"function lastName() {\r",
											"\r",
											"    const lastName = [\r",
											"    \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
											"    \"Alves\", \"Ferreira\", \"Costa\", \"Gomes\", \"Martins\",\r",
											"    \"Lima\", \"Garcia\", \"Dias\", \"Mendes\", \"Rocha\",\r",
											"    \"Nunes\", \"Pereira\", \"Carvalho\", \"Sousa\", \"Barbosa\",\r",
											"    \"Coelho\", \"Cruz\", \"Henrique\", \"Freitas\", \"Monteiro\",\r",
											"    \"Araujo\", \"Cardoso\", \"Fonseca\", \"Campos\", \"Melo\",\r",
											"    \"Albuquerque\", \"Andrade\", \"Antunes\", \"Amorim\", \"Azevedo\",\r",
											"    \"Batista\", \"Bernardes\", \"Botelho\", \"Camargo\", \"Carmo\",\r",
											"    \"Carvalho\", \"Castro\", \"Coutinho\", \"Couto\", \"Cunha\",\r",
											"    \"Duarte\", \"Figueiredo\", \"Frota\", \"Furtado\", \"Goncalves\",\r",
											"    \"Lopes\", \"Machado\", \"Marques\", \"Matos\", \"Medeiros\",\r",
											"    \"Moraes\", \"Moreira\", \"Moura\", \"Nascimento\", \"Nogueira\",\r",
											"    \"Oliveira\", \"Pacheco\", \"Paiva\", \"Paula\", \"Pinto\",\r",
											"    \"Pires\", \"Queiroz\", \"Ramos\", \"Reis\", \"Ribeiro\",\r",
											"    \"Sampaio\", \"Santana\", \"Santiago\", \"Santos\", \"Severino\",\r",
											"    \"Siqueira\", \"Soares\", \"Teixeira\", \"Torres\", \"Vasconcelos\",\r",
											"    \"Vieira\", \"Vilela\", \"Xavier\", \"Abreu\", \"Almeida\",\r",
											"    \"Alvares\", \"Aragao\", \"Araujo\", \"Barros\", \"Bastos\",\r",
											"    \"Brito\", \"Cabral\", \"Correia\", \"Correa\", \"Domingues\",\r",
											"    \"Escobar\", \"Esteves\", \"Faria\", \"Fernandes\", \"Ferraz\",\r",
											"    \"Franca\", \"Franco\", \"Guedes\", \"Leal\", \"Leite\",\r",
											"    \"Lopes\", \"Lourenco\", \"Maciel\", \"Magalhaes\", \"Maia\",\r",
											"    \"Marinho\", \"Mattos\", \"Menezes\", \"Miranda\", \"Moraes\",\r",
											"    \"Morais\", \"Mourao\", \"Navarro\", \"Neves\", \"Nobre\",\r",
											"    \"Ochoa\", \"Pessoa\", \"Pinheiro\", \"Porto\", \"Quintela\",\r",
											"    \"Rangel\", \"Rego\", \"Ribeiro\", \"Rocha\", \"Rosario\",\r",
											"    \"Sales\", \"Santoro\", \"Saraiva\", \"Sarmento\", \"Seabra\",\r",
											"    \"Sena\", \"Serra\", \"Serrano\", \"Silveira\", \"Simoes\",\r",
											"    \"Soeiro\", \"Tavares\", \"Teles\", \"Tenorio\", \"Terra\",\r",
											"    \"Valente\", \"Valentim\", \"Vargas\", \"Vasques\", \"Veiga\",\r",
											"    \"Veloso\", \"Viana\", \"Viegas\", \"Vieira\", \"Vila\",\r",
											"    \"Vilas\", \"Villas\", \"Vital\", \"Zamith\", \"Zanetti\"]\r",
											"\r",
											"    const randomLastName = lastName[Math.floor(Math.random() * lastName.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastName\", lastName())\r",
											"\r",
											"pm.environment.set(\"FullName\", pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
											"\r",
											"function generateProvedor () {\r",
											"    const provedor = [\"@yahoo.com.br\", \"@gmail.com\", \"@hotmail.com\", \"@uol.com\", \"@outlook.com\"]\r",
											"    const randomProvedor = provedor[Math.floor(Math.random() * provedor.length)]\r",
											"    return randomProvedor\r",
											"}\r",
											"pm.environment.set(\"Provedor\", generateProvedor())\r",
											"\r",
											"pm.environment.set(\"MailUser\", pm.environment.get(\"FullName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")+\"_\"+pm.variables.replaceIn('{{$guid}}' + pm.environment.get(\"Provedor\")))\r",
											"\r",
											"function generatePassword(){\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%*\";\r",
											"    const minLength = 6;\r",
											"    const maxLength = 12;\r",
											"\r",
											"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;\r",
											"    let password = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * chars.length);\r",
											"        password += chars[randomIndex];\r",
											"    }\r",
											"\r",
											"    return password;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"Password\", generatePassword())\r",
											"\r",
											"function generateAdminData() {\r",
											"    // Gera true ou false aleatoriamente\r",
											"    const isAdmin = Math.random() < 0.5;\r",
											"    \r",
											"    // Retorna um objeto com o resultado\r",
											"    return  isAdmin\r",
											"}\r",
											"\r",
											"pm.environment.set(\"AdminData\", generateAdminData())"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const data = pm.response.json()\r",
											"\r",
											"pm.environment.set(\"UserID\", data._id)\r",
											"\r",
											"pm.test(\"Status Code is 201\", () => {\r",
											"    pm.response.to.have.status(201)\r",
											"})\r",
											"\r",
											"pm.test(\"Verify message sucess\", () => {\r",
											"    pm.expect(data.message).to.eql(pm.globals.get(\"MsgUserCreatedSucess\"))\r",
											"})\r",
											"\r",
											"pm.test(\"Verify id is not empty\", () => {\r",
											"    pm.expect(data._id).to.not.be.empty\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{FullName}}\",\r\n  \"email\": \"{{MailUser}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"administrador\": \"{{AdminData}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/usuarios",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar usuários - sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const data = pm.response.json()\r",
											"\r",
											"pm.test(\"Status Code is 200\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test(\"Response contains a array\", function () {\r",
											"    pm.expect(Array.isArray(data.usuarios)).to.be.true;\r",
											"    pm.expect(data.usuarios.length).to.be.above(0);\r",
											"    });\r",
											"\r",
											"pm.test(\"Check properties exists and not be null\", () => {\r",
											"    pm.expect(data.usuarios[0]).to.have.property(\"nome\").and.to.not.be.null\r",
											"    pm.expect(data.usuarios[0]).to.have.property(\"email\").and.to.not.be.null\r",
											"    pm.expect(data.usuarios[0]).to.have.property(\"password\").and.to.not.be.null\r",
											"    pm.expect(data.usuarios[0]).to.have.property(\"administrador\").and.to.not.be.null\r",
											"    pm.expect(data.usuarios[0]).to.have.property(\"_id\").and.to.not.be.null\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/usuarios",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar usuários  admin true - sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const data = pm.response.json()\r",
											"\r",
											"pm.test(\"Status Code is 200\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test(\"Response contains a array\", function ()  {\r",
											"    pm.expect(Array.isArray(data.usuarios)).to.be.true;\r",
											"    pm.expect(data.usuarios.length).to.be.above(0);\r",
											"    });\r",
											"\r",
											"pm.test(\"Check properties exists and not be null\", () => {\r",
											"    pm.expect(data.usuarios[0]).to.have.property(\"nome\").and.to.not.be.null\r",
											"    pm.expect(data.usuarios[0]).to.have.property(\"email\").and.to.not.be.null\r",
											"    pm.expect(data.usuarios[0]).to.have.property(\"password\").and.to.not.be.null\r",
											"    pm.expect(data.usuarios[0]).to.have.property(\"administrador\").and.to.not.be.null\r",
											"    pm.expect(data.usuarios[0]).to.have.property(\"_id\").and.to.not.be.null\r",
											"})\r",
											"\r",
											"pm.test(\"Verify admin is 'true'\", () => {\r",
											"    pm.expect(data.usuarios[0].administrador).to.eql(\"true\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/usuarios?administrador=true",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "administrador",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar usuários  admin false - sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const data = pm.response.json()\r",
											"\r",
											"pm.test(\"Status Code is 200\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test(\"Response contains a array\", function () {\r",
											"    pm.expect(Array.isArray(data.usuarios)).to.be.true;\r",
											"    pm.expect(data.usuarios.length).to.be.above(0);\r",
											"    });\r",
											"\r",
											"pm.test(\"Check properties exists and not be null\", () => {\r",
											"    pm.expect(data.usuarios[0]).to.have.property(\"nome\").and.to.not.be.null\r",
											"    pm.expect(data.usuarios[0]).to.have.property(\"email\").and.to.not.be.null\r",
											"    pm.expect(data.usuarios[0]).to.have.property(\"password\").and.to.not.be.null\r",
											"    pm.expect(data.usuarios[0]).to.have.property(\"administrador\").and.to.not.be.null\r",
											"    pm.expect(data.usuarios[0]).to.have.property(\"_id\").and.to.not.be.null\r",
											"})\r",
											"\r",
											"pm.test(\"Verify admin is 'false'\", () => {\r",
											"    pm.expect(data.usuarios[0].administrador).to.eql(\"false\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/usuarios?administrador=false",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "administrador",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar usuário por id  - sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const data = pm.response.json()\r",
											"\r",
											"pm.test(\"Status Code is 200\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test(\"Check properties exists and not be null\", () => {\r",
											"    pm.expect(data).has.a.property(\"nome\").and.not.be.null\r",
											"    pm.expect(data).has.a.property(\"email\").and.not.be.null\r",
											"    pm.expect(data).has.a.property(\"password\").and.not.be.null\r",
											"    pm.expect(data).has.a.property(\"administrador\").and.not.be.null\r",
											"    pm.expect(data).has.a.property(\"_id\").and.not.be.null\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/usuarios/{{UserID}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"usuarios",
										"{{UserID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar usuário por id  - sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateNewPassword(){\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%*\";\r",
											"    const minLength = 6;\r",
											"    const maxLength = 12;\r",
											"\r",
											"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;\r",
											"    let password = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * chars.length);\r",
											"        password += chars[randomIndex];\r",
											"    }\r",
											"\r",
											"    return password;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"NewPassword\", generateNewPassword())"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const data = pm.response.json()\r",
											"\r",
											"pm.test(\"Status Code is 200\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message updated is sucess\", () => {\r",
											"    pm.expect(data.message).to.eql(pm.globals.get(\"MsgUserUpdatedSucess\"))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{FullName}}\",\r\n  \"email\": \"{{MailUser}}\",\r\n  \"password\": \"{{NewPassword}}\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/usuarios/{{UserID}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"usuarios",
										"{{UserID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar usuário por id após atualização",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const data = pm.response.json()\r",
											"\r",
											"pm.test(\"Status Code is 200\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test(\"Check properties exists and not be null\", () => {\r",
											"    pm.expect(data).has.a.property(\"nome\").and.not.be.null\r",
											"    pm.expect(data).has.a.property(\"email\").and.not.be.null\r",
											"    pm.expect(data).has.a.property(\"password\").and.not.be.null\r",
											"    pm.expect(data).has.a.property(\"administrador\").and.not.be.null\r",
											"    pm.expect(data).has.a.property(\"_id\").and.not.be.null\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/usuarios/{{UserID}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"usuarios",
										"{{UserID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir usuário por id - sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const data = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 200\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test(\"Verify message user deleted sucess\", () => {\r",
											"    pm.expect(data.message).to.eql(pm.globals.get(\"MsgUserDeletedSucess\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/usuarios/{{UserID}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"usuarios",
										"{{UserID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar usuário por id após exclusão",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const data = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message user not found\", () => {\r",
											"    pm.expect(data.message).to.eql(pm.globals.get(\"MsgUserNotFound\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/usuarios/{{UserID}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"usuarios",
										"{{UserID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir usuário por id - usuário com carrinho cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const data = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message error delete\", () => {\r",
											"    pm.expect(data.message).to.eql(pm.globals.get(\"MsgDeleteError\"))\r",
											"})\r",
											"\r",
											"pm.test(\"Check cart id is not empty\", () => {\r",
											"    pm.expect(data.idCarrinho).to.not.be.empty\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/usuarios/{{UserID}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"usuarios",
										"{{UserID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Exceptions",
					"item": [
						{
							"name": "Cadastrar - e-mail já utilizado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const data = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message e-mail exists\", () => {\r",
											"    pm.expect(data.message).to.eql(pm.globals.get(\"MsgEmailExists\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{FullName}}\",\r\n  \"email\": \"{{MailDuplicate}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/usuarios",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar usuários - informando o id inválido como query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const data = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message error id\", () => {\r",
											"    pm.expect(data.id).to.eql(pm.globals.get(\"MsgIdIsNotAllowed\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/usuarios?id={{InvalidId}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "id",
											"value": "{{InvalidId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar usuários - informando o e-mail inválido como query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const data = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message error e-mail\", () => {\r",
											"    pm.expect(data[\"e-mail\"]).to.eql(pm.globals.get(\"MsgEmailIsNotAllowed\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/usuarios?e-mail={{InvalidMail}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "e-mail",
											"value": "{{InvalidMail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar usuários -  informando a senha inválida como query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const data = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message error password\", () => {\r",
											"    pm.expect(data.senha).to.eql(pm.globals.get(\"MsgPasswordIsNotAllowed\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/usuarios?senha={{InvalidPassword}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "senha",
											"value": "{{InvalidPassword}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar usuário por id  - id inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const data = pm.response.json()\r",
											"\r",
											"pm.test(\"Check Status Code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test(\"Check message error id\", () => {\r",
											"    pm.expect(data.message).to.eql(pm.globals.get(\"MsgInvalidId\"))\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/usuarios/{{InvalidId}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"usuarios",
										"{{InvalidId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar usuário por id  - informando id não cadastrado",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Fulano da Silva\",\r\n  \"email\": \"beltrano45@qa.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/usuarios/0uxuPY0cbmQhTfv4",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"usuarios",
										"0uxuPY0cbmQhTfv4"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar usuário por id  - informando e-mail existente",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Fulano da Silva\",\r\n  \"email\": \"beltrano45@qa.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/usuarios/0uxuPY0cbmQhTfv4",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"usuarios",
										"0uxuPY0cbmQhTfv4"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Dependences delete",
					"item": [
						{
							"name": "Excluir produto - sucesso",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/produtos/BeeJh5lz3k6kSIzA",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos",
										"BeeJh5lz3k6kSIzA"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir produto 2 - sucesso",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/produtos/BeeJh5lz3k6kSIzA",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos",
										"BeeJh5lz3k6kSIzA"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir carrinho após cancelamento da compra -  sucesso",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/carrinhos/cancelar-compra",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos",
										"cancelar-compra"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Produtos",
			"item": [
				{
					"name": "Dependences",
					"item": [
						{
							"name": "Cadastrar usuário - sucesso",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Fulano da Silva\",\r\n  \"email\": \"beltrano@qa.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinho - sucesso",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n      \"quantidade\": 1\r\n    },\r\n    {\r\n      \"idProduto\": \"YaeJ455lz3k6kSIzA\",\r\n      \"quantidade\": 3\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/carrinhos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Sucess",
					"item": [
						{
							"name": "Cadastrar produto - sucesso",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Logitech MX Vertical\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 381\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/produtos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar produtos - sucesso",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/produtos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar produto por id - sucesso",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/produtos/BeeJh5lz3k6kSIzA",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos",
										"BeeJh5lz3k6kSIzA"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar produto - sucesso",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Logitech MX Vertical\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 381\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/produtos/BeeJh5lz3k6kSIzA",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos",
										"BeeJh5lz3k6kSIzA"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar produto por id após atualização",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/produtos/BeeJh5lz3k6kSIzA",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos",
										"BeeJh5lz3k6kSIzA"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir produto - sucesso",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/produtos/BeeJh5lz3k6kSIzA",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos",
										"BeeJh5lz3k6kSIzA"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar produto por id após exclusão",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/produtos/BeeJh5lz3k6kSIzA",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos",
										"BeeJh5lz3k6kSIzA"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir produto - produto faz parte de um carrinho",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/produtos/BeeJh5lz3k6kSIzA",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos",
										"BeeJh5lz3k6kSIzA"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Exceptions",
					"item": [
						{
							"name": "Cadastrar produto - com nome já utilizado",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Logitech MX Vertical\",\r\n  \"preco\": 690,\r\n  \"descricao\": \"Teclado\",\r\n  \"quantidade\": 35\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/produtos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar produto - com sem utilizar token",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Mr Gamer Tecnology\",\r\n  \"preco\": 690,\r\n  \"descricao\": \"Teclado\",\r\n  \"quantidade\": 35\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/produtos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar produto - sem usuário administrador",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Logitech MX Vertical\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 381\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/produtos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar produtos -  utilizando nome inválido por query",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/produtos?nome=Cidade",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									],
									"query": [
										{
											"key": "nome",
											"value": "Cidade"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar produtos -  utilizando preco inválido por query",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/produtos?preco=000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									],
									"query": [
										{
											"key": "preco",
											"value": "000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar produtos -  utilizando descrição inválida por query",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/produtos?descricao=()",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									],
									"query": [
										{
											"key": "descricao",
											"value": "()"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar produtos - utilizando quantidade inválida por query",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/produtos?quantidade=-25",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									],
									"query": [
										{
											"key": "quantidade",
											"value": "-25"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar produtos - utilizando id inválido por query",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/produtos?id=4Hz6rNXtZIfE2LXb",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									],
									"query": [
										{
											"key": "id",
											"value": "4Hz6rNXtZIfE2LXb"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar produto por id - utilizando id inválido",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/produtos/BeeJh5lz3k6kSIaZ",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos",
										"BeeJh5lz3k6kSIaZ"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar produto - cadastro de novo produto",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Logic Mage\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 381\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/produtos/BeeJh5lz3k6kSIzA",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos",
										"BeeJh5lz3k6kSIzA"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar produto - cadastro duplicado",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Logitech MX Vertical\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 381\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/produtos/BeeJh5lz3k6kSIzA",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos",
										"BeeJh5lz3k6kSIzA"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar produto - sem informar token",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Logitech MX Vertical\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 381\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/produtos/BeeJh5lz3k6kSIzA",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos",
										"BeeJh5lz3k6kSIzA"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar produto - sem usuário administrador",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Logitech MX Vertical\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 381\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/produtos/BeeJh5lz3k6kSIzA",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos",
										"BeeJh5lz3k6kSIzA"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir produto - sem informar o token",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/produtos/BeeJh5lz3k6kSIzA",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos",
										"BeeJh5lz3k6kSIzA"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir produto - sem usuário administrador",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/produtos/BeeJh5lz3k6kSIzA",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos",
										"BeeJh5lz3k6kSIzA"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Carrinhos",
			"item": [
				{
					"name": "Dependences",
					"item": [
						{
							"name": "Cadastrar usuário - sucesso",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Fulano da Silva\",\r\n  \"email\": \"beltrano@qa.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Sucess",
					"item": [
						{
							"name": "Cadastrar carrinho - sucesso",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n      \"quantidade\": 1\r\n    },\r\n    {\r\n      \"idProduto\": \"YaeJ455lz3k6kSIzA\",\r\n      \"quantidade\": 3\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/carrinhos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar carrinhos - sucesso",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/carrinhos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar carrinho por id - sucesso",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/carrinhos/qbMqntef4iTOwWfg",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos",
										"qbMqntef4iTOwWfg"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir carrinho após finalização da compra -  sucesso",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/carrinhos/concluir-compra",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"carrinhos",
										"concluir-compra"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar carrinho por id  após finalizar compra",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/carrinhos/qbMqntef4iTOwWfg",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos",
										"qbMqntef4iTOwWfg"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir carrinho após cancelamento da compra -  sucesso",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/carrinhos/cancelar-compra",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos",
										"cancelar-compra"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar carrinho por id  após cancelar compra",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/carrinhos/qbMqntef4iTOwWfg",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos",
										"qbMqntef4iTOwWfg"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Exceptions",
					"item": [
						{
							"name": "Cadastrar carrinho - carrinho duplicado",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n      \"quantidade\": 1\r\n    },\r\n    {\r\n      \"idProduto\": \"YaeJ455lz3k6kSIzA\",\r\n      \"quantidade\": 3\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/carrinhos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinho - produto duplicado",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n      \"quantidade\": 1\r\n    },\r\n     {\r\n      \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/carrinhos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinho - produto inválido",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n     {\r\n      \"idProduto\": \"YaeJ455lz3k6kSI\",\r\n      \"quantidade\": 3\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/carrinhos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinho - produto zerado no estoque",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"FxnoyJ38v8gfEcr7\",\r\n      \"quantidade\": 1\r\n    },\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/carrinhos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinho - sem informar o token",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n      \"quantidade\": 1\r\n    },\r\n    {\r\n      \"idProduto\": \"YaeJ455lz3k6kSIzA\",\r\n      \"quantidade\": 3\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/carrinhos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar carrinhos -  id do carrinho inválido como query",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/carrinhos?idCarrinho=qbMqntef4iTOwWGF",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									],
									"query": [
										{
											"key": "idCarrinho",
											"value": "qbMqntef4iTOwWGF"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar carrinhos - preço total inválido como query",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/carrinhos?precoTotal=0000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									],
									"query": [
										{
											"key": "precoTotal",
											"value": "0000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar carrinhos - sucesso quantidade total  inválida como query",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/carrinhos?quantidadeTotal=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									],
									"query": [
										{
											"key": "quantidadeTotal",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar carrinhos - sucesso id do usuário inválido como query",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/carrinhos?idUsuario=0uxuPY0cbmQhpEz1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									],
									"query": [
										{
											"key": "idUsuario",
											"value": "0uxuPY0cbmQhpEz1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar carrinho por id - informando id inválido",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/carrinhos/qbMqntef4iTOwWfg",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos",
										"qbMqntef4iTOwWfg"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir carrinho após finalização da compra -  sem informar o token",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/carrinhos/concluir-compra",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos",
										"concluir-compra"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir carrinho após cancelamento da compra -  sem informar o token",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/carrinhos/cancelar-compra",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos",
										"cancelar-compra"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}